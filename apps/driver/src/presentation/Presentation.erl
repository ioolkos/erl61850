%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0.8
%% Purpose: Encoding and decoding of the types in Presentation.

-module('Presentation').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("Presentation.hrl").
-asn1_info([{vsn,'5.0.8'},
            {module,'Presentation'},
            {options,[ber,{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_CPtype/2,
enc_CPAPPDU/2,
enc_Respondingpresentationselector/2,
enc_Presentationcontextdefinitionresultlist/2,
enc_Resultlist/2,
enc_Result/2,
enc_Modeselector/2,
enc_Userdata/2,
enc_Simplyencodeddata/2,
enc_Fullyencodeddata/2,
enc_PDVlist/2,
enc_Presentationcontextdefinitionlist/2,
enc_Contextlist/2,
enc_Presentationcontextidentifier/2,
enc_Abstractsyntaxname/2,
enc_Transfersyntaxname/2,
enc_Protocolversion/2,
enc_Callingpresentationselector/2,
enc_Calledpresentationselector/2,
enc_Presentationselector/2,
enc_Defaultcontextname/2,
enc_Presentationrequirements/2,
enc_Usersessionrequirements/2
]).

-export([
dec_CPtype/2,
dec_CPAPPDU/2,
dec_Respondingpresentationselector/2,
dec_Presentationcontextdefinitionresultlist/2,
dec_Resultlist/2,
dec_Result/2,
dec_Modeselector/2,
dec_Userdata/2,
dec_Simplyencodeddata/2,
dec_Fullyencodeddata/2,
dec_PDVlist/2,
dec_Presentationcontextdefinitionlist/2,
dec_Contextlist/2,
dec_Presentationcontextidentifier/2,
dec_Abstractsyntaxname/2,
dec_Transfersyntaxname/2,
dec_Protocolversion/2,
dec_Callingpresentationselector/2,
dec_Calledpresentationselector/2,
dec_Presentationselector/2,
dec_Defaultcontextname/2,
dec_Presentationrequirements/2,
dec_Usersessionrequirements/2
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data) ->
try
   Result = decode_disp(Type, element(1, ber_decode_nif(Data))),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('CPtype', Data) -> enc_CPtype(Data);
encode_disp('CPAPPDU', Data) -> enc_CPAPPDU(Data);
encode_disp('Respondingpresentationselector', Data) -> enc_Respondingpresentationselector(Data);
encode_disp('Presentationcontextdefinitionresultlist', Data) -> enc_Presentationcontextdefinitionresultlist(Data);
encode_disp('Resultlist', Data) -> enc_Resultlist(Data);
encode_disp('Result', Data) -> enc_Result(Data);
encode_disp('Modeselector', Data) -> enc_Modeselector(Data);
encode_disp('Userdata', Data) -> enc_Userdata(Data);
encode_disp('Simplyencodeddata', Data) -> enc_Simplyencodeddata(Data);
encode_disp('Fullyencodeddata', Data) -> enc_Fullyencodeddata(Data);
encode_disp('PDVlist', Data) -> enc_PDVlist(Data);
encode_disp('Presentationcontextdefinitionlist', Data) -> enc_Presentationcontextdefinitionlist(Data);
encode_disp('Contextlist', Data) -> enc_Contextlist(Data);
encode_disp('Presentationcontextidentifier', Data) -> enc_Presentationcontextidentifier(Data);
encode_disp('Abstractsyntaxname', Data) -> enc_Abstractsyntaxname(Data);
encode_disp('Transfersyntaxname', Data) -> enc_Transfersyntaxname(Data);
encode_disp('Protocolversion', Data) -> enc_Protocolversion(Data);
encode_disp('Callingpresentationselector', Data) -> enc_Callingpresentationselector(Data);
encode_disp('Calledpresentationselector', Data) -> enc_Calledpresentationselector(Data);
encode_disp('Presentationselector', Data) -> enc_Presentationselector(Data);
encode_disp('Defaultcontextname', Data) -> enc_Defaultcontextname(Data);
encode_disp('Presentationrequirements', Data) -> enc_Presentationrequirements(Data);
encode_disp('Usersessionrequirements', Data) -> enc_Usersessionrequirements(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('CPtype', Data) -> dec_CPtype(Data);
decode_disp('CPAPPDU', Data) -> dec_CPAPPDU(Data);
decode_disp('Respondingpresentationselector', Data) -> dec_Respondingpresentationselector(Data);
decode_disp('Presentationcontextdefinitionresultlist', Data) -> dec_Presentationcontextdefinitionresultlist(Data);
decode_disp('Resultlist', Data) -> dec_Resultlist(Data);
decode_disp('Result', Data) -> dec_Result(Data);
decode_disp('Modeselector', Data) -> dec_Modeselector(Data);
decode_disp('Userdata', Data) -> dec_Userdata(Data);
decode_disp('Simplyencodeddata', Data) -> dec_Simplyencodeddata(Data);
decode_disp('Fullyencodeddata', Data) -> dec_Fullyencodeddata(Data);
decode_disp('PDVlist', Data) -> dec_PDVlist(Data);
decode_disp('Presentationcontextdefinitionlist', Data) -> dec_Presentationcontextdefinitionlist(Data);
decode_disp('Contextlist', Data) -> dec_Contextlist(Data);
decode_disp('Presentationcontextidentifier', Data) -> dec_Presentationcontextidentifier(Data);
decode_disp('Abstractsyntaxname', Data) -> dec_Abstractsyntaxname(Data);
decode_disp('Transfersyntaxname', Data) -> dec_Transfersyntaxname(Data);
decode_disp('Protocolversion', Data) -> dec_Protocolversion(Data);
decode_disp('Callingpresentationselector', Data) -> dec_Callingpresentationselector(Data);
decode_disp('Calledpresentationselector', Data) -> dec_Calledpresentationselector(Data);
decode_disp('Presentationselector', Data) -> dec_Presentationselector(Data);
decode_disp('Defaultcontextname', Data) -> dec_Defaultcontextname(Data);
decode_disp('Presentationrequirements', Data) -> dec_Presentationrequirements(Data);
decode_disp('Usersessionrequirements', Data) -> dec_Usersessionrequirements(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  CPtype
%%================================
enc_CPtype(Val) ->
    enc_CPtype(Val, [<<49>>]).

enc_CPtype(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute modeselector(1)   External Presentation:Modeselector
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Modeselector'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute normalmodeparameters(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CPtype_normalmodeparameters'(Cindex2, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CPtype_normalmodeparameters
%%================================
enc_CPtype_normalmodeparameters(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8} = Val,

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING DEFAULT = [version1]
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT ->
            {<<>>,0};
         _ when Cindex1 =:= [version1] ->
            {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex1, [{version1,0}], [<<128>>])
       end,

%%-------------------------------------------------
%% attribute callingpresentationselector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledpresentationselector(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute presentationcontextdefinitionlist(4)   External Presentation:Presentationcontextdefinitionlist OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Presentationcontextdefinitionlist'(Cindex4, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute defaultcontextname(5)   External Presentation:Defaultcontextname OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Defaultcontextname'(Cindex5, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute presentationrequirements(6) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex6, [{contextmanagement,0},{restoration,1}], [<<136>>])
       end,

%%-------------------------------------------------
%% attribute usersessionrequirements(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex7, [{halfduplex,0},{duplex,1},{expediteddata,2},{minorsynchronize,3},{majorsynchronize,4},{resynchronize,5},{activitymanagement,6},{negotiatedrelease,7},{capabilitydata,8},{exceptions,9},{typeddata,10},{symmetricsynchronize,11},{dataseparation,12}], [<<137>>])
       end,

%%-------------------------------------------------
%% attribute userdata(8)   External Presentation:Userdata OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Userdata'(Cindex8, [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_CPtype(Tlv) ->
   dec_CPtype(Tlv, [17]).

dec_CPtype(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
SetFun = fun(FunTlv) ->
case FunTlv of 
      %modeselector
TTlv = {131072,_} ->
    {1, TTlv};
      %normalmodeparameters
TTlv = {131074,_} ->
    {2, TTlv};
      Else -> 
         {3, Else}
   end
   end,
PositionList = [SetFun(TempTlv)|| TempTlv <- Tlv1],
Tlv2 = [Stlv || {_,Stlv} <- lists:sort(PositionList)],

%%-------------------------------------------------
%% attribute modeselector(1)   External Presentation:Modeselector
%%-------------------------------------------------
[V1|Tlv3] = Tlv2, 
Term1 = 'dec_Modeselector'(V1, [131072]),

%%-------------------------------------------------
%% attribute normalmodeparameters(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv4} = case Tlv3 of
[{131074,V2}|TempTlv4] ->
    {'dec_CPtype_normalmodeparameters'(V2, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'CPtype',Term1,Term2},
Res1.
'dec_CPtype_normalmodeparameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING DEFAULT = [version1]
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_named_bit_string(V1, [{version1,0}], []), TempTlv2};
    _ ->
        {[version1],Tlv1}
end,

%%-------------------------------------------------
%% attribute callingpresentationselector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledpresentationselector(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute presentationcontextdefinitionlist(4)   External Presentation:Presentationcontextdefinitionlist OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131076,V4}|TempTlv5] ->
    {'dec_Presentationcontextdefinitionlist'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute defaultcontextname(5)   External Presentation:Defaultcontextname OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131078,V5}|TempTlv6] ->
    {'dec_Defaultcontextname'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute presentationrequirements(6) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131080,V6}|TempTlv7] ->
    {decode_named_bit_string(V6, [{contextmanagement,0},{restoration,1}], []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute usersessionrequirements(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131081,V7}|TempTlv8] ->
    {decode_named_bit_string(V7, [{halfduplex,0},{duplex,1},{expediteddata,2},{minorsynchronize,3},{majorsynchronize,4},{resynchronize,5},{activitymanagement,6},{negotiatedrelease,7},{capabilitydata,8},{exceptions,9},{typeddata,10},{symmetricsynchronize,11},{dataseparation,12}], []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute userdata(8)   External Presentation:Userdata OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[V8 = {65536,_}|TempTlv9] ->
    {'dec_Userdata'(V8, []), TempTlv9};
[V8 = {65537,_}|TempTlv9] ->
    {'dec_Userdata'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
Res1 = {'CPtype_normalmodeparameters',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
Res1.


%%================================
%%  CPAPPDU
%%================================
enc_CPAPPDU(Val) ->
    enc_CPAPPDU(Val, [<<49>>]).

enc_CPAPPDU(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute modeselector(1)   External Presentation:Modeselector
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Modeselector'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute normalmodeparameters(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CPAPPDU_normalmodeparameters'(Cindex2, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CPAPPDU_normalmodeparameters
%%================================
enc_CPAPPDU_normalmodeparameters(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6} = Val,

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING DEFAULT = [version1]
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT ->
            {<<>>,0};
         _ when Cindex1 =:= [version1] ->
            {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex1, [{version1,0}], [<<128>>])
       end,

%%-------------------------------------------------
%% attribute respondingpresentationselector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute presentationcontextdefinitionresultlist(3)   External Presentation:Presentationcontextdefinitionresultlist OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Presentationcontextdefinitionresultlist'(Cindex3, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute presentationrequirements(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex4, [{contextmanagement,0},{restoration,1}], [<<136>>])
       end,

%%-------------------------------------------------
%% attribute usersessionrequirements(5) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex5, [{halfduplex,0},{duplex,1},{expediteddata,2},{minorsynchronize,3},{majorsynchronize,4},{resynchronize,5},{activitymanagement,6},{negotiatedrelease,7},{capabilitydata,8},{exceptions,9},{typeddata,10},{symmetricsynchronize,11},{dataseparation,12}], [<<137>>])
       end,

%%-------------------------------------------------
%% attribute userdata(6)   External Presentation:Userdata OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Userdata'(Cindex6, [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_CPAPPDU(Tlv) ->
   dec_CPAPPDU(Tlv, [17]).

dec_CPAPPDU(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
SetFun = fun(FunTlv) ->
case FunTlv of 
      %modeselector
TTlv = {131072,_} ->
    {1, TTlv};
      %normalmodeparameters
TTlv = {131074,_} ->
    {2, TTlv};
      Else -> 
         {3, Else}
   end
   end,
PositionList = [SetFun(TempTlv)|| TempTlv <- Tlv1],
Tlv2 = [Stlv || {_,Stlv} <- lists:sort(PositionList)],

%%-------------------------------------------------
%% attribute modeselector(1)   External Presentation:Modeselector
%%-------------------------------------------------
[V1|Tlv3] = Tlv2, 
Term1 = 'dec_Modeselector'(V1, [131072]),

%%-------------------------------------------------
%% attribute normalmodeparameters(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv4} = case Tlv3 of
[{131074,V2}|TempTlv4] ->
    {'dec_CPAPPDU_normalmodeparameters'(V2, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'CPAPPDU',Term1,Term2},
Res1.
'dec_CPAPPDU_normalmodeparameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING DEFAULT = [version1]
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_named_bit_string(V1, [{version1,0}], []), TempTlv2};
    _ ->
        {[version1],Tlv1}
end,

%%-------------------------------------------------
%% attribute respondingpresentationselector(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131075,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute presentationcontextdefinitionresultlist(3)   External Presentation:Presentationcontextdefinitionresultlist OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131077,V3}|TempTlv4] ->
    {'dec_Presentationcontextdefinitionresultlist'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute presentationrequirements(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131080,V4}|TempTlv5] ->
    {decode_named_bit_string(V4, [{contextmanagement,0},{restoration,1}], []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute usersessionrequirements(5) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131081,V5}|TempTlv6] ->
    {decode_named_bit_string(V5, [{halfduplex,0},{duplex,1},{expediteddata,2},{minorsynchronize,3},{majorsynchronize,4},{resynchronize,5},{activitymanagement,6},{negotiatedrelease,7},{capabilitydata,8},{exceptions,9},{typeddata,10},{symmetricsynchronize,11},{dataseparation,12}], []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute userdata(6)   External Presentation:Userdata OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[V6 = {65536,_}|TempTlv7] ->
    {'dec_Userdata'(V6, []), TempTlv7};
[V6 = {65537,_}|TempTlv7] ->
    {'dec_Userdata'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
Res1 = {'CPAPPDU_normalmodeparameters',Term1,Term2,Term3,Term4,Term5,Term6},
Res1.


%%================================
%%  Respondingpresentationselector
%%================================
enc_Respondingpresentationselector(Val) ->
    enc_Respondingpresentationselector(Val, [<<4>>]).

enc_Respondingpresentationselector(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_Respondingpresentationselector(Tlv) ->
   dec_Respondingpresentationselector(Tlv, [4]).

dec_Respondingpresentationselector(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Presentationcontextdefinitionresultlist
%%================================
enc_Presentationcontextdefinitionresultlist(Val) ->
    enc_Presentationcontextdefinitionresultlist(Val, [<<48>>]).

enc_Presentationcontextdefinitionresultlist(Val, TagIn) ->
   enc_Resultlist(Val, TagIn).


dec_Presentationcontextdefinitionresultlist(Tlv) ->
   dec_Presentationcontextdefinitionresultlist(Tlv, [16]).

dec_Presentationcontextdefinitionresultlist(Tlv, TagIn) ->
'dec_Resultlist'(Tlv, TagIn).



%%================================
%%  Resultlist
%%================================
enc_Resultlist(Val) ->
    enc_Resultlist(Val, [<<48>>]).

enc_Resultlist(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Resultlist_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Resultlist_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Resultlist_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Resultlist_SEQOF'(H, [<<48>>]),
   'enc_Resultlist_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Resultlist_SEQOF
%%================================
enc_Resultlist_SEQOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute result(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [{acceptance,0},{userrejection,1},{providerrejection,2}], [<<128>>]),

%%-------------------------------------------------
%% attribute transfersyntaxname(2) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_object_identifier(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute providerreason(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [{reasonnotspecified,0},{abstractsyntaxnotsupported,1},{proposedtransfersyntaxesnotsupported,2},{locallimitonDCSexceeded,3}], [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_Resultlist(Tlv) ->
   dec_Resultlist(Tlv, [16]).

dec_Resultlist(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Resultlist_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_Resultlist_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute result(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
number2name(Val1, [{acceptance,0},{userrejection,1},{providerrejection,2}])
end
,

%%-------------------------------------------------
%% attribute transfersyntaxname(2) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_object_identifier(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute providerreason(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_integer(V3, []),
number2name(Val2, [{reasonnotspecified,0},{abstractsyntaxnotsupported,1},{proposedtransfersyntaxesnotsupported,2},{locallimitonDCSexceeded,3}])
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'Resultlist_SEQOF',Term1,Term2,Term3},
Res1.


%%================================
%%  Result
%%================================
enc_Result(Val) ->
    enc_Result(Val, [<<2>>]).

enc_Result(Val, TagIn) ->
encode_integer(Val, [{acceptance,0},{userrejection,1},{providerrejection,2}], TagIn).


dec_Result(Tlv) ->
   dec_Result(Tlv, [2]).

dec_Result(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
number2name(Val1, [{acceptance,0},{userrejection,1},{providerrejection,2}])
end
.



%%================================
%%  Modeselector
%%================================
enc_Modeselector(Val) ->
    enc_Modeselector(Val, [<<49>>]).

enc_Modeselector(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute modevalue(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [{x4101984mode,0},{normalmode,1}], [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_Modeselector(Tlv) ->
   dec_Modeselector(Tlv, [17]).

dec_Modeselector(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
SetFun = fun(FunTlv) ->
case FunTlv of 
      %modevalue
TTlv = {131072,_} ->
    {1, TTlv};
      Else -> 
         {2, Else}
   end
   end,
PositionList = [SetFun(TempTlv)|| TempTlv <- Tlv1],
Tlv2 = [Stlv || {_,Stlv} <- lists:sort(PositionList)],

%%-------------------------------------------------
%% attribute modevalue(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv3] = Tlv2, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
number2name(Val1, [{x4101984mode,0},{normalmode,1}])
end
,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'Modeselector',Term1},
Res1.


%%================================
%%  Userdata
%%================================
enc_Userdata(Val) ->
    enc_Userdata(Val, []).

enc_Userdata(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      simplyencodeddata ->
         encode_restricted_string(element(2,Val), [<<64>>]);
      fullyencodeddata ->
         'enc_Fullyencodeddata'(element(2,Val), [<<97>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_Userdata(Tlv) ->
   dec_Userdata(Tlv, []).

dec_Userdata(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'simplyencodeddata'
    {65536, V1} -> 
        {simplyencodeddata, decode_octet_string(V1, [])};


%% 'fullyencodeddata'
    {65537, V1} -> 
        {fullyencodeddata, 'dec_Fullyencodeddata'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Simplyencodeddata
%%================================
enc_Simplyencodeddata(Val) ->
    enc_Simplyencodeddata(Val, [<<4>>]).

enc_Simplyencodeddata(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_Simplyencodeddata(Tlv) ->
   dec_Simplyencodeddata(Tlv, [4]).

dec_Simplyencodeddata(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Fullyencodeddata
%%================================
enc_Fullyencodeddata(Val) ->
    enc_Fullyencodeddata(Val, [<<48>>]).

enc_Fullyencodeddata(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Fullyencodeddata_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Fullyencodeddata_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Fullyencodeddata_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PDVlist'(H, [<<48>>]),
   'enc_Fullyencodeddata_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_Fullyencodeddata(Tlv) ->
   dec_Fullyencodeddata(Tlv, [16]).

dec_Fullyencodeddata(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PDVlist'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  PDVlist
%%================================
enc_PDVlist(Val) ->
    enc_PDVlist(Val, [<<48>>]).

enc_PDVlist(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute transfersyntaxname(1) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_object_identifier(Cindex1, [<<6>>])
       end,

%%-------------------------------------------------
%% attribute presentationcontextidentifier(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute presentationdatavalues(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_PDVlist_presentationdatavalues'(Cindex3, []),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PDVlist_presentationdatavalues
%%================================
enc_PDVlist_presentationdatavalues(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      singleASN1type ->
         encode_open_type(element(2,Val), [<<160>>]);
      octetaligned ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      arbitrary ->
         encode_unnamed_bit_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_PDVlist(Tlv) ->
   dec_PDVlist(Tlv, [16]).

dec_PDVlist(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute transfersyntaxname(1) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{6,V1}|TempTlv2] ->
    {decode_object_identifier(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute presentationcontextidentifier(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [2]),

%%-------------------------------------------------
%% attribute presentationdatavalues(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_PDVlist_presentationdatavalues'(V3, []),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'PDVlist',Term1,Term2,Term3},
Res1.
'dec_PDVlist_presentationdatavalues'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'singleASN1type'
    {131072, V1} -> 
        {singleASN1type, decode_open_type_as_binary(V1, [])};


%% 'octetaligned'
    {131073, V1} -> 
        {octetaligned, decode_octet_string(V1, [])};


%% 'arbitrary'
    {131074, V1} -> 
        {arbitrary, decode_native_bit_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Presentationcontextdefinitionlist
%%================================
enc_Presentationcontextdefinitionlist(Val) ->
    enc_Presentationcontextdefinitionlist(Val, [<<48>>]).

enc_Presentationcontextdefinitionlist(Val, TagIn) ->
   enc_Contextlist(Val, TagIn).


dec_Presentationcontextdefinitionlist(Tlv) ->
   dec_Presentationcontextdefinitionlist(Tlv, [16]).

dec_Presentationcontextdefinitionlist(Tlv, TagIn) ->
'dec_Contextlist'(Tlv, TagIn).



%%================================
%%  Contextlist
%%================================
enc_Contextlist(Val) ->
    enc_Contextlist(Val, [<<48>>]).

enc_Contextlist(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Contextlist_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Contextlist_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Contextlist_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Contextlist_SEQOF'(H, [<<48>>]),
   'enc_Contextlist_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Contextlist_SEQOF
%%================================
enc_Contextlist_SEQOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute presentationcontextidentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute abstractsyntaxname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_object_identifier(Cindex2, [<<6>>]),

%%-------------------------------------------------
%% attribute transfersyntaxnamelist(3) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Contextlist_SEQOF_transfersyntaxnamelist'(Cindex3, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Contextlist_SEQOF_transfersyntaxnamelist
%%================================
enc_Contextlist_SEQOF_transfersyntaxnamelist(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Contextlist_SEQOF_transfersyntaxnamelist_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Contextlist_SEQOF_transfersyntaxnamelist_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Contextlist_SEQOF_transfersyntaxnamelist_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_object_identifier(H, [<<6>>]),
   'enc_Contextlist_SEQOF_transfersyntaxnamelist_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_Contextlist(Tlv) ->
   dec_Contextlist(Tlv, [16]).

dec_Contextlist(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Contextlist_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_Contextlist_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute presentationcontextidentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [2]),

%%-------------------------------------------------
%% attribute abstractsyntaxname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_object_identifier(V2, [6]),

%%-------------------------------------------------
%% attribute transfersyntaxnamelist(3) with type SEQUENCE OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Contextlist_SEQOF_transfersyntaxnamelist'(V3, [16]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'Contextlist_SEQOF',Term1,Term2,Term3},
Res1.
'dec_Contextlist_SEQOF_transfersyntaxnamelist'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_object_identifier(V1, [6]) || V1 <- Tlv1].




%%================================
%%  Presentationcontextidentifier
%%================================
enc_Presentationcontextidentifier(Val) ->
    enc_Presentationcontextidentifier(Val, [<<2>>]).

enc_Presentationcontextidentifier(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Presentationcontextidentifier(Tlv) ->
   dec_Presentationcontextidentifier(Tlv, [2]).

dec_Presentationcontextidentifier(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  Abstractsyntaxname
%%================================
enc_Abstractsyntaxname(Val) ->
    enc_Abstractsyntaxname(Val, [<<6>>]).

enc_Abstractsyntaxname(Val, TagIn) ->
encode_object_identifier(Val, TagIn).


dec_Abstractsyntaxname(Tlv) ->
   dec_Abstractsyntaxname(Tlv, [6]).

dec_Abstractsyntaxname(Tlv, TagIn) ->
decode_object_identifier(Tlv, TagIn).



%%================================
%%  Transfersyntaxname
%%================================
enc_Transfersyntaxname(Val) ->
    enc_Transfersyntaxname(Val, [<<6>>]).

enc_Transfersyntaxname(Val, TagIn) ->
encode_object_identifier(Val, TagIn).


dec_Transfersyntaxname(Tlv) ->
   dec_Transfersyntaxname(Tlv, [6]).

dec_Transfersyntaxname(Tlv, TagIn) ->
decode_object_identifier(Tlv, TagIn).



%%================================
%%  Protocolversion
%%================================
enc_Protocolversion(Val) ->
    enc_Protocolversion(Val, [<<3>>]).

enc_Protocolversion(Val, TagIn) ->
encode_named_bit_string(Val, [{version1,0}], TagIn).


dec_Protocolversion(Tlv) ->
   dec_Protocolversion(Tlv, [3]).

dec_Protocolversion(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{version1,0}], TagIn).



%%================================
%%  Callingpresentationselector
%%================================
enc_Callingpresentationselector(Val) ->
    enc_Callingpresentationselector(Val, [<<4>>]).

enc_Callingpresentationselector(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_Callingpresentationselector(Tlv) ->
   dec_Callingpresentationselector(Tlv, [4]).

dec_Callingpresentationselector(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Calledpresentationselector
%%================================
enc_Calledpresentationselector(Val) ->
    enc_Calledpresentationselector(Val, [<<4>>]).

enc_Calledpresentationselector(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_Calledpresentationselector(Tlv) ->
   dec_Calledpresentationselector(Tlv, [4]).

dec_Calledpresentationselector(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Presentationselector
%%================================
enc_Presentationselector(Val) ->
    enc_Presentationselector(Val, [<<4>>]).

enc_Presentationselector(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_Presentationselector(Tlv) ->
   dec_Presentationselector(Tlv, [4]).

dec_Presentationselector(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Defaultcontextname
%%================================
enc_Defaultcontextname(Val) ->
    enc_Defaultcontextname(Val, [<<48>>]).

enc_Defaultcontextname(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute abstractsyntaxname(1) with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_object_identifier(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transfersyntaxname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_object_identifier(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_Defaultcontextname(Tlv) ->
   dec_Defaultcontextname(Tlv, [16]).

dec_Defaultcontextname(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute abstractsyntaxname(1) with type OBJECT IDENTIFIER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_object_identifier(V1, [131072]),

%%-------------------------------------------------
%% attribute transfersyntaxname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_object_identifier(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'Defaultcontextname',Term1,Term2},
Res1.


%%================================
%%  Presentationrequirements
%%================================
enc_Presentationrequirements(Val) ->
    enc_Presentationrequirements(Val, [<<3>>]).

enc_Presentationrequirements(Val, TagIn) ->
encode_named_bit_string(Val, [{contextmanagement,0},{restoration,1}], TagIn).


dec_Presentationrequirements(Tlv) ->
   dec_Presentationrequirements(Tlv, [3]).

dec_Presentationrequirements(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{contextmanagement,0},{restoration,1}], TagIn).



%%================================
%%  Usersessionrequirements
%%================================
enc_Usersessionrequirements(Val) ->
    enc_Usersessionrequirements(Val, [<<3>>]).

enc_Usersessionrequirements(Val, TagIn) ->
encode_named_bit_string(Val, [{halfduplex,0},{duplex,1},{expediteddata,2},{minorsynchronize,3},{majorsynchronize,4},{resynchronize,5},{activitymanagement,6},{negotiatedrelease,7},{capabilitydata,8},{exceptions,9},{typeddata,10},{symmetricsynchronize,11},{dataseparation,12}], TagIn).


dec_Usersessionrequirements(Tlv) ->
   dec_Usersessionrequirements(Tlv, [3]).

dec_Usersessionrequirements(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{halfduplex,0},{duplex,1},{expediteddata,2},{minorsynchronize,3},{majorsynchronize,4},{resynchronize,5},{activitymanagement,6},{negotiatedrelease,7},{capabilitydata,8},{exceptions,9},{typeddata,10},{symmetricsynchronize,11},{dataseparation,12}], TagIn).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

dec_subidentifiers(<<>>, _Av, Al) ->
    lists:reverse(Al);
dec_subidentifiers(<<1:1,H:7,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, Av bsl 7 + H, Al);
dec_subidentifiers(<<H,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 + H|Al]).

decode_bitstring2(1,
                  Unused,
                  <<B7:1,B6:1,B5:1,B4:1,B3:1,B2:1,B1:1,B0:1,_/binary>>) ->
    lists:sublist([B7,B6,B5,B4,B3,B2,B1,B0], 8 - Unused);
decode_bitstring2(Len,
                  Unused,
                  <<B7:1,
                    B6:1,
                    B5:1,
                    B4:1,
                    B3:1,
                    B2:1,
                    B1:1,
                    B0:1,
                    Buffer/binary>>) ->
    [B7,B6,B5,B4,B3,B2,B1,B0|decode_bitstring2(Len - 1, Unused, Buffer)].

decode_bitstring_NNL(BitList, NamedNumberList) ->
    decode_bitstring_NNL(BitList, NamedNumberList, 0, []).

decode_bitstring_NNL([], _, _No, Result) ->
    lists:reverse(Result);
decode_bitstring_NNL([B|BitList],
                     [{Name,No}|NamedNumberList],
                     No,
                     Result) ->
    if
        B =:= 0 ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 Result);
        true ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 [Name|Result])
    end;
decode_bitstring_NNL([1|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList,
                         NamedNumberList,
                         No + 1,
                         [{bit,No}|Result]);
decode_bitstring_NNL([0|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList, NamedNumberList, No + 1, Result).

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_named_bit_string(Buffer, NamedNumberList, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            [];
        <<Unused,Bits/binary>> ->
            BitString = decode_bitstring2(byte_size(Bits), Unused, Bits),
            decode_bitstring_NNL(BitString, NamedNumberList)
    end.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_object_identifier(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    [AddedObjVal|ObjVals] = dec_subidentifiers(Val, 0, []),
    {Val1,Val2} =
        if
            AddedObjVal < 40 ->
                {0,AddedObjVal};
            AddedObjVal < 80 ->
                {1,AddedObjVal - 40};
            true ->
                {2,AddedObjVal - 80}
        end,
    list_to_tuple([Val1,Val2|ObjVals]).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_open_type_as_binary(Tlv, TagIn) ->
    ber_encode(match_tags(Tlv, TagIn)).

do_encode_named_bit_string([FirstVal|RestVal], NamedBitList, TagIn) ->
    ToSetPos = get_all_bitposes([FirstVal|RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = make_and_set_list(Size, ToSetPos, 0),
    {Len,Unused,OctetList} = encode_bitstring(BitList),
    encode_tags(TagIn, [Unused|OctetList], Len + 1).

e_object_identifier({'OBJECT IDENTIFIER',V}) ->
    e_object_identifier(V);
e_object_identifier(V) when is_tuple(V) ->
    e_object_identifier(tuple_to_list(V));
e_object_identifier([E1,E2|Tail]) ->
    Head = 40 * E1 + E2,
    {H,Lh} = mk_object_val(Head),
    {R,Lr} = lists:mapfoldl(fun enc_obj_id_tail/2, 0, Tail),
    {[H|R],Lh + Lr}.

enc_obj_id_tail(H, Len) ->
    {B,L} = mk_object_val(H),
    {B,Len + L}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Val], 1);
encode_bitstring(Val) ->
    {Unused,Octet} = unused_bitlist(Val, 7, 0),
    {1,Unused,[Octet]}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest], Ack, Len) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Ack,Val], Len + 1);
encode_bitstring([], Ack, Len) ->
    {Len,0,Ack};
encode_bitstring(Rest, Ack, Len) ->
    {Unused,Val} = unused_bitlist(Rest, 7, 0),
    {Len + 1,Unused,[Ack,Val]}.

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, NamedNumberList, Tag) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedNumberList) of
        {_,NewVal} ->
            encode_tags(Tag, encode_integer(NewVal));
        _ ->
            exit({error,{asn1,{encode_integer_namednumber,Val}}})
    end;
encode_integer(Val, _NamedNumberList, Tag) ->
    encode_tags(Tag, encode_integer(Val)).

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_named_bit_string([H|_] = Bits, NamedBitList, TagIn)
    when is_atom(H) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([{bit,_}|_] = Bits, NamedBitList, TagIn) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([], _NamedBitList, TagIn) ->
    encode_unnamed_bit_string(<<>>, TagIn);
encode_named_bit_string(Bits, _NamedBitList, TagIn)
    when is_bitstring(Bits) ->
    encode_unnamed_bit_string(Bits, TagIn).

encode_object_identifier(Val, TagIn) ->
    encode_tags(TagIn, e_object_identifier(Val)).

encode_open_type(Val, T) when is_list(Val) ->
    encode_open_type(list_to_binary(Val), T);
encode_open_type(Val, Tag) ->
    encode_tags(Tag, Val, byte_size(Val)).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

get_all_bitposes([{bit,ValPos}|Rest], NamedBitList, Ack) ->
    get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
get_all_bitposes([Val|Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName,ValPos} ->
            get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
        _ ->
            exit({error,{asn1,{bitstring_namedbit,Val}}})
    end;
get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

make_and_set_list(0, [], _) ->
    [];
make_and_set_list(0, _, _) ->
    exit({error,{asn1,bitstring_sizeconstraint}});
make_and_set_list(Len, [XPos|SetPos], XPos) ->
    [1|make_and_set_list(Len - 1, SetPos, XPos + 1)];
make_and_set_list(Len, [Pos|SetPos], XPos) ->
    [0|make_and_set_list(Len - 1, [Pos|SetPos], XPos + 1)];
make_and_set_list(Len, [], XPos) ->
    [0|make_and_set_list(Len - 1, [], XPos + 1)].

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

mk_object_val(0, Ack, Len) ->
    {Ack,Len};
mk_object_val(Val, Ack, Len) ->
    mk_object_val(Val bsr 7, [Val band 127 bor 128|Ack], Len + 1).

mk_object_val(Val) when Val =< 127 ->
    {[255 band Val],1};
mk_object_val(Val) ->
    mk_object_val(Val bsr 7, [Val band 127], 1).

number2name(Int, NamedNumberList) ->
    case lists:keyfind(Int, 2, NamedNumberList) of
        {NamedVal,_} ->
            NamedVal;
        _ ->
            Int
    end.

unused_bitlist([], Trail, Ack) ->
    {Trail + 1,Ack};
unused_bitlist([Bit|Rest], Trail, Ack) ->
    unused_bitlist(Rest, Trail - 1, Bit bsl Trail bor Ack).
