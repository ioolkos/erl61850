%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0.8
%% Purpose: Encoding and decoding of the types in MMS.

-module('MMS').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("MMS.hrl").
-asn1_info([{vsn,'5.0.8'},
            {module,'MMS'},
            {options,[ber,verbose,{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_MmsPdu/2,
enc_UnconfirmedPDU/2,
enc_UnconfirmedService/2,
enc_ConfirmedRequestPdu/2,
enc_ConfirmedResponsePdu/2,
enc_ConfirmedServiceRequest/2,
enc_ConfirmedServiceResponse/2,
enc_TimeOfDay/2,
enc_Identifier/2,
enc_Integer8/2,
enc_Integer16/2,
enc_Integer32/2,
enc_Unsigned8/2,
enc_Unsigned16/2,
enc_Unsigned32/2,
enc_MMSString/2,
enc_UtcTime/2,
enc_ObjectName/2,
enc_InitiateErrorPdu/2,
enc_InitiateRequestPdu/2,
enc_InitRequestDetail/2,
enc_InitiateResponsePdu/2,
enc_InitResponseDetail/2,
enc_ParameterSupportOptions/2,
enc_ServiceSupportOptions/2,
enc_ServiceError/2,
enc_GetNameListRequest/2,
enc_ObjectClass/2,
enc_GetNameListResponse/2,
enc_TypeSpecification/2,
enc_StructComponent/2,
enc_AlternateAccess/2,
enc_AlternateAccessSelection/2,
enc_IndexRangeSeq/2,
enc_ReadRequest/2,
enc_ReadResponse/2,
enc_WriteRequest/2,
enc_WriteResponse/2,
enc_GetVariableAccessAttributesRequest/2,
enc_GetVariableAccessAttributesResponse/2,
enc_InformationReport/2,
enc_DefineNamedVariableListRequest/2,
enc_DefineNamedVariableListResponse/2,
enc_GetNamedVariableListAttributesRequest/2,
enc_GetNamedVariableListAttributesResponse/2,
enc_DeleteNamedVariableListRequest/2,
enc_DeleteNamedVariableListResponse/2,
enc_AccessResult/2,
enc_DataAccessError/2,
enc_Data/2,
enc_DataSequence/2,
enc_FloatingPoint/2,
enc_VariableAccessSpecification/2,
enc_VariableDef/2,
enc_VariableSpecification/2,
enc_ScatteredAccessDescription/2
]).

-export([
dec_MmsPdu/2,
dec_UnconfirmedPDU/2,
dec_UnconfirmedService/2,
dec_ConfirmedRequestPdu/2,
dec_ConfirmedResponsePdu/2,
dec_ConfirmedServiceRequest/2,
dec_ConfirmedServiceResponse/2,
dec_TimeOfDay/2,
dec_Identifier/2,
dec_Integer8/2,
dec_Integer16/2,
dec_Integer32/2,
dec_Unsigned8/2,
dec_Unsigned16/2,
dec_Unsigned32/2,
dec_MMSString/2,
dec_UtcTime/2,
dec_ObjectName/2,
dec_InitiateErrorPdu/2,
dec_InitiateRequestPdu/2,
dec_InitRequestDetail/2,
dec_InitiateResponsePdu/2,
dec_InitResponseDetail/2,
dec_ParameterSupportOptions/2,
dec_ServiceSupportOptions/2,
dec_ServiceError/2,
dec_GetNameListRequest/2,
dec_ObjectClass/2,
dec_GetNameListResponse/2,
dec_TypeSpecification/2,
dec_StructComponent/2,
dec_AlternateAccess/2,
dec_AlternateAccessSelection/2,
dec_IndexRangeSeq/2,
dec_ReadRequest/2,
dec_ReadResponse/2,
dec_WriteRequest/2,
dec_WriteResponse/2,
dec_GetVariableAccessAttributesRequest/2,
dec_GetVariableAccessAttributesResponse/2,
dec_InformationReport/2,
dec_DefineNamedVariableListRequest/2,
dec_DefineNamedVariableListResponse/2,
dec_GetNamedVariableListAttributesRequest/2,
dec_GetNamedVariableListAttributesResponse/2,
dec_DeleteNamedVariableListRequest/2,
dec_DeleteNamedVariableListResponse/2,
dec_AccessResult/2,
dec_DataAccessError/2,
dec_Data/2,
dec_DataSequence/2,
dec_FloatingPoint/2,
dec_VariableAccessSpecification/2,
dec_VariableDef/2,
dec_VariableSpecification/2,
dec_ScatteredAccessDescription/2
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data) ->
try
   Result = decode_disp(Type, element(1, ber_decode_nif(Data))),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('MmsPdu', Data) -> enc_MmsPdu(Data);
encode_disp('UnconfirmedPDU', Data) -> enc_UnconfirmedPDU(Data);
encode_disp('UnconfirmedService', Data) -> enc_UnconfirmedService(Data);
encode_disp('ConfirmedRequestPdu', Data) -> enc_ConfirmedRequestPdu(Data);
encode_disp('ConfirmedResponsePdu', Data) -> enc_ConfirmedResponsePdu(Data);
encode_disp('ConfirmedServiceRequest', Data) -> enc_ConfirmedServiceRequest(Data);
encode_disp('ConfirmedServiceResponse', Data) -> enc_ConfirmedServiceResponse(Data);
encode_disp('TimeOfDay', Data) -> enc_TimeOfDay(Data);
encode_disp('Identifier', Data) -> enc_Identifier(Data);
encode_disp('Integer8', Data) -> enc_Integer8(Data);
encode_disp('Integer16', Data) -> enc_Integer16(Data);
encode_disp('Integer32', Data) -> enc_Integer32(Data);
encode_disp('Unsigned8', Data) -> enc_Unsigned8(Data);
encode_disp('Unsigned16', Data) -> enc_Unsigned16(Data);
encode_disp('Unsigned32', Data) -> enc_Unsigned32(Data);
encode_disp('MMSString', Data) -> enc_MMSString(Data);
encode_disp('UtcTime', Data) -> enc_UtcTime(Data);
encode_disp('ObjectName', Data) -> enc_ObjectName(Data);
encode_disp('InitiateErrorPdu', Data) -> enc_InitiateErrorPdu(Data);
encode_disp('InitiateRequestPdu', Data) -> enc_InitiateRequestPdu(Data);
encode_disp('InitRequestDetail', Data) -> enc_InitRequestDetail(Data);
encode_disp('InitiateResponsePdu', Data) -> enc_InitiateResponsePdu(Data);
encode_disp('InitResponseDetail', Data) -> enc_InitResponseDetail(Data);
encode_disp('ParameterSupportOptions', Data) -> enc_ParameterSupportOptions(Data);
encode_disp('ServiceSupportOptions', Data) -> enc_ServiceSupportOptions(Data);
encode_disp('ServiceError', Data) -> enc_ServiceError(Data);
encode_disp('GetNameListRequest', Data) -> enc_GetNameListRequest(Data);
encode_disp('ObjectClass', Data) -> enc_ObjectClass(Data);
encode_disp('GetNameListResponse', Data) -> enc_GetNameListResponse(Data);
encode_disp('TypeSpecification', Data) -> enc_TypeSpecification(Data);
encode_disp('StructComponent', Data) -> enc_StructComponent(Data);
encode_disp('AlternateAccess', Data) -> enc_AlternateAccess(Data);
encode_disp('AlternateAccessSelection', Data) -> enc_AlternateAccessSelection(Data);
encode_disp('IndexRangeSeq', Data) -> enc_IndexRangeSeq(Data);
encode_disp('ReadRequest', Data) -> enc_ReadRequest(Data);
encode_disp('ReadResponse', Data) -> enc_ReadResponse(Data);
encode_disp('WriteRequest', Data) -> enc_WriteRequest(Data);
encode_disp('WriteResponse', Data) -> enc_WriteResponse(Data);
encode_disp('GetVariableAccessAttributesRequest', Data) -> enc_GetVariableAccessAttributesRequest(Data);
encode_disp('GetVariableAccessAttributesResponse', Data) -> enc_GetVariableAccessAttributesResponse(Data);
encode_disp('InformationReport', Data) -> enc_InformationReport(Data);
encode_disp('DefineNamedVariableListRequest', Data) -> enc_DefineNamedVariableListRequest(Data);
encode_disp('DefineNamedVariableListResponse', Data) -> enc_DefineNamedVariableListResponse(Data);
encode_disp('GetNamedVariableListAttributesRequest', Data) -> enc_GetNamedVariableListAttributesRequest(Data);
encode_disp('GetNamedVariableListAttributesResponse', Data) -> enc_GetNamedVariableListAttributesResponse(Data);
encode_disp('DeleteNamedVariableListRequest', Data) -> enc_DeleteNamedVariableListRequest(Data);
encode_disp('DeleteNamedVariableListResponse', Data) -> enc_DeleteNamedVariableListResponse(Data);
encode_disp('AccessResult', Data) -> enc_AccessResult(Data);
encode_disp('DataAccessError', Data) -> enc_DataAccessError(Data);
encode_disp('Data', Data) -> enc_Data(Data);
encode_disp('DataSequence', Data) -> enc_DataSequence(Data);
encode_disp('FloatingPoint', Data) -> enc_FloatingPoint(Data);
encode_disp('VariableAccessSpecification', Data) -> enc_VariableAccessSpecification(Data);
encode_disp('VariableDef', Data) -> enc_VariableDef(Data);
encode_disp('VariableSpecification', Data) -> enc_VariableSpecification(Data);
encode_disp('ScatteredAccessDescription', Data) -> enc_ScatteredAccessDescription(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('MmsPdu', Data) -> dec_MmsPdu(Data);
decode_disp('UnconfirmedPDU', Data) -> dec_UnconfirmedPDU(Data);
decode_disp('UnconfirmedService', Data) -> dec_UnconfirmedService(Data);
decode_disp('ConfirmedRequestPdu', Data) -> dec_ConfirmedRequestPdu(Data);
decode_disp('ConfirmedResponsePdu', Data) -> dec_ConfirmedResponsePdu(Data);
decode_disp('ConfirmedServiceRequest', Data) -> dec_ConfirmedServiceRequest(Data);
decode_disp('ConfirmedServiceResponse', Data) -> dec_ConfirmedServiceResponse(Data);
decode_disp('TimeOfDay', Data) -> dec_TimeOfDay(Data);
decode_disp('Identifier', Data) -> dec_Identifier(Data);
decode_disp('Integer8', Data) -> dec_Integer8(Data);
decode_disp('Integer16', Data) -> dec_Integer16(Data);
decode_disp('Integer32', Data) -> dec_Integer32(Data);
decode_disp('Unsigned8', Data) -> dec_Unsigned8(Data);
decode_disp('Unsigned16', Data) -> dec_Unsigned16(Data);
decode_disp('Unsigned32', Data) -> dec_Unsigned32(Data);
decode_disp('MMSString', Data) -> dec_MMSString(Data);
decode_disp('UtcTime', Data) -> dec_UtcTime(Data);
decode_disp('ObjectName', Data) -> dec_ObjectName(Data);
decode_disp('InitiateErrorPdu', Data) -> dec_InitiateErrorPdu(Data);
decode_disp('InitiateRequestPdu', Data) -> dec_InitiateRequestPdu(Data);
decode_disp('InitRequestDetail', Data) -> dec_InitRequestDetail(Data);
decode_disp('InitiateResponsePdu', Data) -> dec_InitiateResponsePdu(Data);
decode_disp('InitResponseDetail', Data) -> dec_InitResponseDetail(Data);
decode_disp('ParameterSupportOptions', Data) -> dec_ParameterSupportOptions(Data);
decode_disp('ServiceSupportOptions', Data) -> dec_ServiceSupportOptions(Data);
decode_disp('ServiceError', Data) -> dec_ServiceError(Data);
decode_disp('GetNameListRequest', Data) -> dec_GetNameListRequest(Data);
decode_disp('ObjectClass', Data) -> dec_ObjectClass(Data);
decode_disp('GetNameListResponse', Data) -> dec_GetNameListResponse(Data);
decode_disp('TypeSpecification', Data) -> dec_TypeSpecification(Data);
decode_disp('StructComponent', Data) -> dec_StructComponent(Data);
decode_disp('AlternateAccess', Data) -> dec_AlternateAccess(Data);
decode_disp('AlternateAccessSelection', Data) -> dec_AlternateAccessSelection(Data);
decode_disp('IndexRangeSeq', Data) -> dec_IndexRangeSeq(Data);
decode_disp('ReadRequest', Data) -> dec_ReadRequest(Data);
decode_disp('ReadResponse', Data) -> dec_ReadResponse(Data);
decode_disp('WriteRequest', Data) -> dec_WriteRequest(Data);
decode_disp('WriteResponse', Data) -> dec_WriteResponse(Data);
decode_disp('GetVariableAccessAttributesRequest', Data) -> dec_GetVariableAccessAttributesRequest(Data);
decode_disp('GetVariableAccessAttributesResponse', Data) -> dec_GetVariableAccessAttributesResponse(Data);
decode_disp('InformationReport', Data) -> dec_InformationReport(Data);
decode_disp('DefineNamedVariableListRequest', Data) -> dec_DefineNamedVariableListRequest(Data);
decode_disp('DefineNamedVariableListResponse', Data) -> dec_DefineNamedVariableListResponse(Data);
decode_disp('GetNamedVariableListAttributesRequest', Data) -> dec_GetNamedVariableListAttributesRequest(Data);
decode_disp('GetNamedVariableListAttributesResponse', Data) -> dec_GetNamedVariableListAttributesResponse(Data);
decode_disp('DeleteNamedVariableListRequest', Data) -> dec_DeleteNamedVariableListRequest(Data);
decode_disp('DeleteNamedVariableListResponse', Data) -> dec_DeleteNamedVariableListResponse(Data);
decode_disp('AccessResult', Data) -> dec_AccessResult(Data);
decode_disp('DataAccessError', Data) -> dec_DataAccessError(Data);
decode_disp('Data', Data) -> dec_Data(Data);
decode_disp('DataSequence', Data) -> dec_DataSequence(Data);
decode_disp('FloatingPoint', Data) -> dec_FloatingPoint(Data);
decode_disp('VariableAccessSpecification', Data) -> dec_VariableAccessSpecification(Data);
decode_disp('VariableDef', Data) -> dec_VariableDef(Data);
decode_disp('VariableSpecification', Data) -> dec_VariableSpecification(Data);
decode_disp('ScatteredAccessDescription', Data) -> dec_ScatteredAccessDescription(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  MmsPdu
%%================================
enc_MmsPdu(Val) ->
    enc_MmsPdu(Val, []).

enc_MmsPdu(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      confirmedRequestPdu ->
         'enc_ConfirmedRequestPdu'(element(2,Val), [<<160>>]);
      confirmedResponsePdu ->
         'enc_ConfirmedResponsePdu'(element(2,Val), [<<161>>]);
      unconfirmedPDU ->
         'enc_UnconfirmedPDU'(element(2,Val), [<<163>>]);
      initiateRequestPdu ->
         'enc_InitiateRequestPdu'(element(2,Val), [<<168>>]);
      initiateResponsePdu ->
         'enc_InitiateResponsePdu'(element(2,Val), [<<169>>]);
      initiateErrorPdu ->
         'enc_InitiateErrorPdu'(element(2,Val), [<<170>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_MmsPdu(Tlv) ->
   dec_MmsPdu(Tlv, []).

dec_MmsPdu(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'confirmedRequestPdu'
    {131072, V1} -> 
        {confirmedRequestPdu, 'dec_ConfirmedRequestPdu'(V1, [])};


%% 'confirmedResponsePdu'
    {131073, V1} -> 
        {confirmedResponsePdu, 'dec_ConfirmedResponsePdu'(V1, [])};


%% 'unconfirmedPDU'
    {131075, V1} -> 
        {unconfirmedPDU, 'dec_UnconfirmedPDU'(V1, [])};


%% 'initiateRequestPdu'
    {131080, V1} -> 
        {initiateRequestPdu, 'dec_InitiateRequestPdu'(V1, [])};


%% 'initiateResponsePdu'
    {131081, V1} -> 
        {initiateResponsePdu, 'dec_InitiateResponsePdu'(V1, [])};


%% 'initiateErrorPdu'
    {131082, V1} -> 
        {initiateErrorPdu, 'dec_InitiateErrorPdu'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  UnconfirmedPDU
%%================================
enc_UnconfirmedPDU(Val) ->
    enc_UnconfirmedPDU(Val, [<<48>>]).

enc_UnconfirmedPDU(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute unconfirmedService(1)   External MMS:UnconfirmedService
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UnconfirmedService'(Cindex1, []),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_UnconfirmedPDU(Tlv) ->
   dec_UnconfirmedPDU(Tlv, [16]).

dec_UnconfirmedPDU(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute unconfirmedService(1)   External MMS:UnconfirmedService
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UnconfirmedService'(V1, []),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
Res1 = {'UnconfirmedPDU',Term1},
Res1.


%%================================
%%  UnconfirmedService
%%================================
enc_UnconfirmedService(Val) ->
    enc_UnconfirmedService(Val, []).

enc_UnconfirmedService(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      informationReport ->
         'enc_InformationReport'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_UnconfirmedService(Tlv) ->
   dec_UnconfirmedService(Tlv, []).

dec_UnconfirmedService(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'informationReport'
    {131072, V1} -> 
        {informationReport, 'dec_InformationReport'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ConfirmedRequestPdu
%%================================
enc_ConfirmedRequestPdu(Val) ->
    enc_ConfirmedRequestPdu(Val, [<<48>>]).

enc_ConfirmedRequestPdu(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute invokeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute confirmedServiceRequest(2)   External MMS:ConfirmedServiceRequest
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ConfirmedServiceRequest'(Cindex2, []),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConfirmedRequestPdu(Tlv) ->
   dec_ConfirmedRequestPdu(Tlv, [16]).

dec_ConfirmedRequestPdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute invokeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute confirmedServiceRequest(2)   External MMS:ConfirmedServiceRequest
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ConfirmedServiceRequest'(V2, []),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ConfirmedRequestPdu',Term1,Term2},
Res1.


%%================================
%%  ConfirmedResponsePdu
%%================================
enc_ConfirmedResponsePdu(Val) ->
    enc_ConfirmedResponsePdu(Val, [<<48>>]).

enc_ConfirmedResponsePdu(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute invokeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute confirmedServiceResponse(2)   External MMS:ConfirmedServiceResponse
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ConfirmedServiceResponse'(Cindex2, []),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ConfirmedResponsePdu(Tlv) ->
   dec_ConfirmedResponsePdu(Tlv, [16]).

dec_ConfirmedResponsePdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute invokeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute confirmedServiceResponse(2)   External MMS:ConfirmedServiceResponse
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ConfirmedServiceResponse'(V2, []),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ConfirmedResponsePdu',Term1,Term2},
Res1.


%%================================
%%  ConfirmedServiceRequest
%%================================
enc_ConfirmedServiceRequest(Val) ->
    enc_ConfirmedServiceRequest(Val, []).

enc_ConfirmedServiceRequest(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      getNameList ->
         'enc_GetNameListRequest'(element(2,Val), [<<161>>]);
      read ->
         'enc_ReadRequest'(element(2,Val), [<<164>>]);
      write ->
         'enc_WriteRequest'(element(2,Val), [<<165>>]);
      getVariableAccessAttributes ->
         'enc_GetVariableAccessAttributesRequest'(element(2,Val), [<<166>>]);
      defineNamedVariableList ->
         'enc_DefineNamedVariableListRequest'(element(2,Val), [<<171>>]);
      getNamedVariableListAttributes ->
         'enc_GetNamedVariableListAttributesRequest'(element(2,Val), [<<172>>]);
      deleteNamedVariableList ->
         'enc_DeleteNamedVariableListRequest'(element(2,Val), [<<173>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ConfirmedServiceRequest(Tlv) ->
   dec_ConfirmedServiceRequest(Tlv, []).

dec_ConfirmedServiceRequest(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'getNameList'
    {131073, V1} -> 
        {getNameList, 'dec_GetNameListRequest'(V1, [])};


%% 'read'
    {131076, V1} -> 
        {read, 'dec_ReadRequest'(V1, [])};


%% 'write'
    {131077, V1} -> 
        {write, 'dec_WriteRequest'(V1, [])};


%% 'getVariableAccessAttributes'
    {131078, V1} -> 
        {getVariableAccessAttributes, 'dec_GetVariableAccessAttributesRequest'(V1, [])};


%% 'defineNamedVariableList'
    {131083, V1} -> 
        {defineNamedVariableList, 'dec_DefineNamedVariableListRequest'(V1, [])};


%% 'getNamedVariableListAttributes'
    {131084, V1} -> 
        {getNamedVariableListAttributes, 'dec_GetNamedVariableListAttributesRequest'(V1, [])};


%% 'deleteNamedVariableList'
    {131085, V1} -> 
        {deleteNamedVariableList, 'dec_DeleteNamedVariableListRequest'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ConfirmedServiceResponse
%%================================
enc_ConfirmedServiceResponse(Val) ->
    enc_ConfirmedServiceResponse(Val, []).

enc_ConfirmedServiceResponse(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      getNameList ->
         'enc_GetNameListResponse'(element(2,Val), [<<161>>]);
      read ->
         'enc_ReadResponse'(element(2,Val), [<<164>>]);
      write ->
         'enc_WriteResponse'(element(2,Val), [<<165>>]);
      getVariableAccessAttributes ->
         'enc_GetVariableAccessAttributesResponse'(element(2,Val), [<<166>>]);
      defineNamedVariableList ->
         encode_null(element(2,Val), [<<139>>]);
      getNamedVariableListAttributes ->
         'enc_GetNamedVariableListAttributesResponse'(element(2,Val), [<<172>>]);
      deleteNamedVariableList ->
         'enc_DeleteNamedVariableListResponse'(element(2,Val), [<<173>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ConfirmedServiceResponse(Tlv) ->
   dec_ConfirmedServiceResponse(Tlv, []).

dec_ConfirmedServiceResponse(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'getNameList'
    {131073, V1} -> 
        {getNameList, 'dec_GetNameListResponse'(V1, [])};


%% 'read'
    {131076, V1} -> 
        {read, 'dec_ReadResponse'(V1, [])};


%% 'write'
    {131077, V1} -> 
        {write, 'dec_WriteResponse'(V1, [])};


%% 'getVariableAccessAttributes'
    {131078, V1} -> 
        {getVariableAccessAttributes, 'dec_GetVariableAccessAttributesResponse'(V1, [])};


%% 'defineNamedVariableList'
    {131083, V1} -> 
        {defineNamedVariableList, decode_null(V1, [])};


%% 'getNamedVariableListAttributes'
    {131084, V1} -> 
        {getNamedVariableListAttributes, 'dec_GetNamedVariableListAttributesResponse'(V1, [])};


%% 'deleteNamedVariableList'
    {131085, V1} -> 
        {deleteNamedVariableList, 'dec_DeleteNamedVariableListResponse'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  TimeOfDay
%%================================
enc_TimeOfDay(Val) ->
    enc_TimeOfDay(Val, [<<4>>]).

enc_TimeOfDay(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_TimeOfDay(Tlv) ->
   dec_TimeOfDay(Tlv, [4]).

dec_TimeOfDay(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Identifier
%%================================
enc_Identifier(Val) ->
    enc_Identifier(Val, [<<26>>]).

enc_Identifier(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_Identifier(Tlv) ->
   dec_Identifier(Tlv, [26]).

dec_Identifier(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  Integer8
%%================================
enc_Integer8(Val) ->
    enc_Integer8(Val, [<<2>>]).

enc_Integer8(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Integer8(Tlv) ->
   dec_Integer8(Tlv, [2]).

dec_Integer8(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -128 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Integer16
%%================================
enc_Integer16(Val) ->
    enc_Integer16(Val, [<<2>>]).

enc_Integer16(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Integer16(Tlv) ->
   dec_Integer16(Tlv, [2]).

dec_Integer16(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -32768 =< Val1, Val1 =< 32767 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Integer32
%%================================
enc_Integer32(Val) ->
    enc_Integer32(Val, [<<2>>]).

enc_Integer32(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Integer32(Tlv) ->
   dec_Integer32(Tlv, [2]).

dec_Integer32(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -2147483648 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Unsigned8
%%================================
enc_Unsigned8(Val) ->
    enc_Unsigned8(Val, [<<2>>]).

enc_Unsigned8(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Unsigned8(Tlv) ->
   dec_Unsigned8(Tlv, [2]).

dec_Unsigned8(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Unsigned16
%%================================
enc_Unsigned16(Val) ->
    enc_Unsigned16(Val, [<<2>>]).

enc_Unsigned16(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Unsigned16(Tlv) ->
   dec_Unsigned16(Tlv, [2]).

dec_Unsigned16(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Unsigned32
%%================================
enc_Unsigned32(Val) ->
    enc_Unsigned32(Val, [<<2>>]).

enc_Unsigned32(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_Unsigned32(Tlv) ->
   dec_Unsigned32(Tlv, [2]).

dec_Unsigned32(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MMSString
%%================================
enc_MMSString(Val) ->
    enc_MMSString(Val, [<<12>>]).

enc_MMSString(Val, TagIn) ->
encode_UTF8_string(Val, TagIn).


dec_MMSString(Tlv) ->
   dec_MMSString(Tlv, [12]).

dec_MMSString(Tlv, TagIn) ->
decode_UTF8_string(Tlv, TagIn).



%%================================
%%  UtcTime
%%================================
enc_UtcTime(Val) ->
    enc_UtcTime(Val, [<<4>>]).

enc_UtcTime(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_UtcTime(Tlv) ->
   dec_UtcTime(Tlv, [4]).

dec_UtcTime(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ObjectName
%%================================
enc_ObjectName(Val) ->
    enc_ObjectName(Val, []).

enc_ObjectName(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      vmdspecific ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      domainspecific ->
         'enc_ObjectName_domainspecific'(element(2,Val), [<<161>>]);
      aaspecific ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ObjectName_domainspecific
%%================================
enc_ObjectName_domainspecific(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute domainId(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<26>>]),

%%-------------------------------------------------
%% attribute itemId(2) with type VisibleString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<26>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ObjectName(Tlv) ->
   dec_ObjectName(Tlv, []).

dec_ObjectName(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'vmdspecific'
    {131072, V1} -> 
        {vmdspecific, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'domainspecific'
    {131073, V1} -> 
        {domainspecific, 'dec_ObjectName_domainspecific'(V1, [])};


%% 'aaspecific'
    {131074, V1} -> 
        {aaspecific, begin
binary_to_list(decode_restricted_string(V1, []))
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ObjectName_domainspecific'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute domainId(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [26]))
end
,

%%-------------------------------------------------
%% attribute itemId(2) with type VisibleString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [26]))
end
,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ObjectName_domainspecific',Term1,Term2},
Res1.


%%================================
%%  InitiateErrorPdu
%%================================
enc_InitiateErrorPdu(Val) ->
    enc_InitiateErrorPdu(Val, [<<48>>]).

enc_InitiateErrorPdu(Val, TagIn) ->
   enc_ServiceError(Val, TagIn).


dec_InitiateErrorPdu(Tlv) ->
   dec_InitiateErrorPdu(Tlv, [16]).

dec_InitiateErrorPdu(Tlv, TagIn) ->
'dec_ServiceError'(Tlv, TagIn).



%%================================
%%  InitiateRequestPdu
%%================================
enc_InitiateRequestPdu(Val) ->
    enc_InitiateRequestPdu(Val, [<<48>>]).

enc_InitiateRequestPdu(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute localDetailCalling(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute proposedMaxServOutstandingCalling(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute proposedMaxServOutstandingCalled(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute proposedDataStructureNestingLevel(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute mmsInitRequestDetail(5)   External MMS:InitRequestDetail
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_InitRequestDetail'(Cindex5, [<<164>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_InitiateRequestPdu(Tlv) ->
   dec_InitiateRequestPdu(Tlv, [16]).

dec_InitiateRequestPdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute localDetailCalling(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if -2147483648 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute proposedMaxServOutstandingCalling(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if -32768 =< Val2, Val2 =< 32767 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute proposedMaxServOutstandingCalled(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if -32768 =< Val3, Val3 =< 32767 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute proposedDataStructureNestingLevel(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_integer(V4, []),
if -128 =< Val4, Val4 =< 127 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute mmsInitRequestDetail(5)   External MMS:InitRequestDetail
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_InitRequestDetail'(V5, [131076]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'InitiateRequestPdu',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  InitRequestDetail
%%================================
enc_InitRequestDetail(Val) ->
    enc_InitRequestDetail(Val, [<<48>>]).

enc_InitRequestDetail(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute proposedVersionNumber(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute proposedParameterCBB(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_named_bit_string(Cindex2, [{str1,0},{str2,1},{vnam,2},{valt,3},{vadr,4},{vsca,5},{tpy,6},{vlis,7},{real,8},{cei,10}], [<<129>>]),

%%-------------------------------------------------
%% attribute servicesSupportedCalling(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_named_bit_string(Cindex3, [{status,0},{getNameList,1},{identify,2},{rename,3},{read,4},{write,5},{getVariableAccessAttributes,6},{defineNamedVariable,7},{defineScatteredAccess,8},{getScatteredAccessAttributes,9},{deleteVariableAccess,10},{defineNamedVariableList,11},{getNamedVariableListAttributes,12},{deleteNamedVariableList,13},{defineNamedType,14},{getNamedTypeAttributes,15},{deleteNamedType,16},{input,17},{output,18},{takeControl,19},{relinquishControl,20},{defineSemaphore,21},{deleteSemaphore,22},{reportSemaphoreStatus,23},{reportPoolSemaphoreStatus,24},{reportSemaphoreEntryStatus,25},{initiateDownloadSequence,26},{downloadSegment,27},{terminateDownloadSequence,28},{initiateUploadSequence,29},{uploadSegment,30},{terminateUploadSequence,31},{requestDomainDownload,32},{requestDomainUpload,33},{loadDomainContent,34},{storeDomainContent,35},{deleteDomain,36},{getDomainAttributes,37},{createProgramInvocation,38},{deleteProgramInvocation,39},{start,40},{stop,41},{resume,42},{reset,43},{kill,44},{getProgramInvocationAttributes,45},{obtainFile,46},{defineEventCondition,47},{deleteEventCondition,48},{getEventConditionAttributes,49},{reportEventConditionStatus,50},{alterEventConditionMonitoring,51},{triggerEvent,52},{defineEventAction,53},{deleteEventAction,54},{getEventActionAttributes,55},{reportEventActionStatus,56},{defineEventEnrollment,57},{deleteEventEnrollment,58},{alterEventEnrollment,59},{reportEventEnrollmentStatus,60},{getEventEnrollmentAttributes,61},{acknowledgeEventNotification,62},{getAlarmSummary,63},{getAlarmEnrollmentSummary,64},{readJournal,65},{writeJournal,66},{initializeJournal,67},{reportJournalStatus,68},{createJournal,69},{deleteJournal,70},{getCapabilityList,71},{fileOpen,72},{fileRead,73},{fileClose,74},{fileRename,75},{fileDelete,76},{fileDirectory,77},{unsolicitedStatus,78},{informationReport,79},{eventNotification,80},{attachToEventCondition,81},{attachToSemaphore,82},{conclude,83},{cancel,84}], [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_InitRequestDetail(Tlv) ->
   dec_InitRequestDetail(Tlv, [16]).

dec_InitRequestDetail(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute proposedVersionNumber(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -32768 =< Val1, Val1 =< 32767 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute proposedParameterCBB(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_named_bit_string(V2, [{str1,0},{str2,1},{vnam,2},{valt,3},{vadr,4},{vsca,5},{tpy,6},{vlis,7},{real,8},{cei,10}], [131073]),

%%-------------------------------------------------
%% attribute servicesSupportedCalling(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_named_bit_string(V3, [{status,0},{getNameList,1},{identify,2},{rename,3},{read,4},{write,5},{getVariableAccessAttributes,6},{defineNamedVariable,7},{defineScatteredAccess,8},{getScatteredAccessAttributes,9},{deleteVariableAccess,10},{defineNamedVariableList,11},{getNamedVariableListAttributes,12},{deleteNamedVariableList,13},{defineNamedType,14},{getNamedTypeAttributes,15},{deleteNamedType,16},{input,17},{output,18},{takeControl,19},{relinquishControl,20},{defineSemaphore,21},{deleteSemaphore,22},{reportSemaphoreStatus,23},{reportPoolSemaphoreStatus,24},{reportSemaphoreEntryStatus,25},{initiateDownloadSequence,26},{downloadSegment,27},{terminateDownloadSequence,28},{initiateUploadSequence,29},{uploadSegment,30},{terminateUploadSequence,31},{requestDomainDownload,32},{requestDomainUpload,33},{loadDomainContent,34},{storeDomainContent,35},{deleteDomain,36},{getDomainAttributes,37},{createProgramInvocation,38},{deleteProgramInvocation,39},{start,40},{stop,41},{resume,42},{reset,43},{kill,44},{getProgramInvocationAttributes,45},{obtainFile,46},{defineEventCondition,47},{deleteEventCondition,48},{getEventConditionAttributes,49},{reportEventConditionStatus,50},{alterEventConditionMonitoring,51},{triggerEvent,52},{defineEventAction,53},{deleteEventAction,54},{getEventActionAttributes,55},{reportEventActionStatus,56},{defineEventEnrollment,57},{deleteEventEnrollment,58},{alterEventEnrollment,59},{reportEventEnrollmentStatus,60},{getEventEnrollmentAttributes,61},{acknowledgeEventNotification,62},{getAlarmSummary,63},{getAlarmEnrollmentSummary,64},{readJournal,65},{writeJournal,66},{initializeJournal,67},{reportJournalStatus,68},{createJournal,69},{deleteJournal,70},{getCapabilityList,71},{fileOpen,72},{fileRead,73},{fileClose,74},{fileRename,75},{fileDelete,76},{fileDirectory,77},{unsolicitedStatus,78},{informationReport,79},{eventNotification,80},{attachToEventCondition,81},{attachToSemaphore,82},{conclude,83},{cancel,84}], [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'InitRequestDetail',Term1,Term2,Term3},
Res1.


%%================================
%%  InitiateResponsePdu
%%================================
enc_InitiateResponsePdu(Val) ->
    enc_InitiateResponsePdu(Val, [<<48>>]).

enc_InitiateResponsePdu(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute localDetailCalled(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute negotiatedMaxServOutstandingCalling(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute negotiatedMaxServOutstandingCalled(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute negotiatedDataStructureNestingLevel(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute mmsInitResponseDetail(5)   External MMS:InitResponseDetail
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_InitResponseDetail'(Cindex5, [<<164>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_InitiateResponsePdu(Tlv) ->
   dec_InitiateResponsePdu(Tlv, [16]).

dec_InitiateResponsePdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute localDetailCalled(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if -2147483648 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute negotiatedMaxServOutstandingCalling(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if -32768 =< Val2, Val2 =< 32767 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute negotiatedMaxServOutstandingCalled(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if -32768 =< Val3, Val3 =< 32767 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute negotiatedDataStructureNestingLevel(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_integer(V4, []),
if -128 =< Val4, Val4 =< 127 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute mmsInitResponseDetail(5)   External MMS:InitResponseDetail
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_InitResponseDetail'(V5, [131076]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'InitiateResponsePdu',Term1,Term2,Term3,Term4,Term5},
Res1.


%%================================
%%  InitResponseDetail
%%================================
enc_InitResponseDetail(Val) ->
    enc_InitResponseDetail(Val, [<<48>>]).

enc_InitResponseDetail(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute negotiatedVersionNumber(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute negotiatedParameterCBB(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_named_bit_string(Cindex2, [{str1,0},{str2,1},{vnam,2},{valt,3},{vadr,4},{vsca,5},{tpy,6},{vlis,7},{real,8},{cei,10}], [<<129>>]),

%%-------------------------------------------------
%% attribute servicesSupportedCalled(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_named_bit_string(Cindex3, [{status,0},{getNameList,1},{identify,2},{rename,3},{read,4},{write,5},{getVariableAccessAttributes,6},{defineNamedVariable,7},{defineScatteredAccess,8},{getScatteredAccessAttributes,9},{deleteVariableAccess,10},{defineNamedVariableList,11},{getNamedVariableListAttributes,12},{deleteNamedVariableList,13},{defineNamedType,14},{getNamedTypeAttributes,15},{deleteNamedType,16},{input,17},{output,18},{takeControl,19},{relinquishControl,20},{defineSemaphore,21},{deleteSemaphore,22},{reportSemaphoreStatus,23},{reportPoolSemaphoreStatus,24},{reportSemaphoreEntryStatus,25},{initiateDownloadSequence,26},{downloadSegment,27},{terminateDownloadSequence,28},{initiateUploadSequence,29},{uploadSegment,30},{terminateUploadSequence,31},{requestDomainDownload,32},{requestDomainUpload,33},{loadDomainContent,34},{storeDomainContent,35},{deleteDomain,36},{getDomainAttributes,37},{createProgramInvocation,38},{deleteProgramInvocation,39},{start,40},{stop,41},{resume,42},{reset,43},{kill,44},{getProgramInvocationAttributes,45},{obtainFile,46},{defineEventCondition,47},{deleteEventCondition,48},{getEventConditionAttributes,49},{reportEventConditionStatus,50},{alterEventConditionMonitoring,51},{triggerEvent,52},{defineEventAction,53},{deleteEventAction,54},{getEventActionAttributes,55},{reportEventActionStatus,56},{defineEventEnrollment,57},{deleteEventEnrollment,58},{alterEventEnrollment,59},{reportEventEnrollmentStatus,60},{getEventEnrollmentAttributes,61},{acknowledgeEventNotification,62},{getAlarmSummary,63},{getAlarmEnrollmentSummary,64},{readJournal,65},{writeJournal,66},{initializeJournal,67},{reportJournalStatus,68},{createJournal,69},{deleteJournal,70},{getCapabilityList,71},{fileOpen,72},{fileRead,73},{fileClose,74},{fileRename,75},{fileDelete,76},{fileDirectory,77},{unsolicitedStatus,78},{informationReport,79},{eventNotification,80},{attachToEventCondition,81},{attachToSemaphore,82},{conclude,83},{cancel,84}], [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_InitResponseDetail(Tlv) ->
   dec_InitResponseDetail(Tlv, [16]).

dec_InitResponseDetail(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute negotiatedVersionNumber(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -32768 =< Val1, Val1 =< 32767 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute negotiatedParameterCBB(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_named_bit_string(V2, [{str1,0},{str2,1},{vnam,2},{valt,3},{vadr,4},{vsca,5},{tpy,6},{vlis,7},{real,8},{cei,10}], [131073]),

%%-------------------------------------------------
%% attribute servicesSupportedCalled(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_named_bit_string(V3, [{status,0},{getNameList,1},{identify,2},{rename,3},{read,4},{write,5},{getVariableAccessAttributes,6},{defineNamedVariable,7},{defineScatteredAccess,8},{getScatteredAccessAttributes,9},{deleteVariableAccess,10},{defineNamedVariableList,11},{getNamedVariableListAttributes,12},{deleteNamedVariableList,13},{defineNamedType,14},{getNamedTypeAttributes,15},{deleteNamedType,16},{input,17},{output,18},{takeControl,19},{relinquishControl,20},{defineSemaphore,21},{deleteSemaphore,22},{reportSemaphoreStatus,23},{reportPoolSemaphoreStatus,24},{reportSemaphoreEntryStatus,25},{initiateDownloadSequence,26},{downloadSegment,27},{terminateDownloadSequence,28},{initiateUploadSequence,29},{uploadSegment,30},{terminateUploadSequence,31},{requestDomainDownload,32},{requestDomainUpload,33},{loadDomainContent,34},{storeDomainContent,35},{deleteDomain,36},{getDomainAttributes,37},{createProgramInvocation,38},{deleteProgramInvocation,39},{start,40},{stop,41},{resume,42},{reset,43},{kill,44},{getProgramInvocationAttributes,45},{obtainFile,46},{defineEventCondition,47},{deleteEventCondition,48},{getEventConditionAttributes,49},{reportEventConditionStatus,50},{alterEventConditionMonitoring,51},{triggerEvent,52},{defineEventAction,53},{deleteEventAction,54},{getEventActionAttributes,55},{reportEventActionStatus,56},{defineEventEnrollment,57},{deleteEventEnrollment,58},{alterEventEnrollment,59},{reportEventEnrollmentStatus,60},{getEventEnrollmentAttributes,61},{acknowledgeEventNotification,62},{getAlarmSummary,63},{getAlarmEnrollmentSummary,64},{readJournal,65},{writeJournal,66},{initializeJournal,67},{reportJournalStatus,68},{createJournal,69},{deleteJournal,70},{getCapabilityList,71},{fileOpen,72},{fileRead,73},{fileClose,74},{fileRename,75},{fileDelete,76},{fileDirectory,77},{unsolicitedStatus,78},{informationReport,79},{eventNotification,80},{attachToEventCondition,81},{attachToSemaphore,82},{conclude,83},{cancel,84}], [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'InitResponseDetail',Term1,Term2,Term3},
Res1.


%%================================
%%  ParameterSupportOptions
%%================================
enc_ParameterSupportOptions(Val) ->
    enc_ParameterSupportOptions(Val, [<<3>>]).

enc_ParameterSupportOptions(Val, TagIn) ->
encode_named_bit_string(Val, [{str1,0},{str2,1},{vnam,2},{valt,3},{vadr,4},{vsca,5},{tpy,6},{vlis,7},{real,8},{cei,10}], TagIn).


dec_ParameterSupportOptions(Tlv) ->
   dec_ParameterSupportOptions(Tlv, [3]).

dec_ParameterSupportOptions(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{str1,0},{str2,1},{vnam,2},{valt,3},{vadr,4},{vsca,5},{tpy,6},{vlis,7},{real,8},{cei,10}], TagIn).



%%================================
%%  ServiceSupportOptions
%%================================
enc_ServiceSupportOptions(Val) ->
    enc_ServiceSupportOptions(Val, [<<3>>]).

enc_ServiceSupportOptions(Val, TagIn) ->
encode_named_bit_string(Val, [{status,0},{getNameList,1},{identify,2},{rename,3},{read,4},{write,5},{getVariableAccessAttributes,6},{defineNamedVariable,7},{defineScatteredAccess,8},{getScatteredAccessAttributes,9},{deleteVariableAccess,10},{defineNamedVariableList,11},{getNamedVariableListAttributes,12},{deleteNamedVariableList,13},{defineNamedType,14},{getNamedTypeAttributes,15},{deleteNamedType,16},{input,17},{output,18},{takeControl,19},{relinquishControl,20},{defineSemaphore,21},{deleteSemaphore,22},{reportSemaphoreStatus,23},{reportPoolSemaphoreStatus,24},{reportSemaphoreEntryStatus,25},{initiateDownloadSequence,26},{downloadSegment,27},{terminateDownloadSequence,28},{initiateUploadSequence,29},{uploadSegment,30},{terminateUploadSequence,31},{requestDomainDownload,32},{requestDomainUpload,33},{loadDomainContent,34},{storeDomainContent,35},{deleteDomain,36},{getDomainAttributes,37},{createProgramInvocation,38},{deleteProgramInvocation,39},{start,40},{stop,41},{resume,42},{reset,43},{kill,44},{getProgramInvocationAttributes,45},{obtainFile,46},{defineEventCondition,47},{deleteEventCondition,48},{getEventConditionAttributes,49},{reportEventConditionStatus,50},{alterEventConditionMonitoring,51},{triggerEvent,52},{defineEventAction,53},{deleteEventAction,54},{getEventActionAttributes,55},{reportEventActionStatus,56},{defineEventEnrollment,57},{deleteEventEnrollment,58},{alterEventEnrollment,59},{reportEventEnrollmentStatus,60},{getEventEnrollmentAttributes,61},{acknowledgeEventNotification,62},{getAlarmSummary,63},{getAlarmEnrollmentSummary,64},{readJournal,65},{writeJournal,66},{initializeJournal,67},{reportJournalStatus,68},{createJournal,69},{deleteJournal,70},{getCapabilityList,71},{fileOpen,72},{fileRead,73},{fileClose,74},{fileRename,75},{fileDelete,76},{fileDirectory,77},{unsolicitedStatus,78},{informationReport,79},{eventNotification,80},{attachToEventCondition,81},{attachToSemaphore,82},{conclude,83},{cancel,84}], TagIn).


dec_ServiceSupportOptions(Tlv) ->
   dec_ServiceSupportOptions(Tlv, [3]).

dec_ServiceSupportOptions(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{status,0},{getNameList,1},{identify,2},{rename,3},{read,4},{write,5},{getVariableAccessAttributes,6},{defineNamedVariable,7},{defineScatteredAccess,8},{getScatteredAccessAttributes,9},{deleteVariableAccess,10},{defineNamedVariableList,11},{getNamedVariableListAttributes,12},{deleteNamedVariableList,13},{defineNamedType,14},{getNamedTypeAttributes,15},{deleteNamedType,16},{input,17},{output,18},{takeControl,19},{relinquishControl,20},{defineSemaphore,21},{deleteSemaphore,22},{reportSemaphoreStatus,23},{reportPoolSemaphoreStatus,24},{reportSemaphoreEntryStatus,25},{initiateDownloadSequence,26},{downloadSegment,27},{terminateDownloadSequence,28},{initiateUploadSequence,29},{uploadSegment,30},{terminateUploadSequence,31},{requestDomainDownload,32},{requestDomainUpload,33},{loadDomainContent,34},{storeDomainContent,35},{deleteDomain,36},{getDomainAttributes,37},{createProgramInvocation,38},{deleteProgramInvocation,39},{start,40},{stop,41},{resume,42},{reset,43},{kill,44},{getProgramInvocationAttributes,45},{obtainFile,46},{defineEventCondition,47},{deleteEventCondition,48},{getEventConditionAttributes,49},{reportEventConditionStatus,50},{alterEventConditionMonitoring,51},{triggerEvent,52},{defineEventAction,53},{deleteEventAction,54},{getEventActionAttributes,55},{reportEventActionStatus,56},{defineEventEnrollment,57},{deleteEventEnrollment,58},{alterEventEnrollment,59},{reportEventEnrollmentStatus,60},{getEventEnrollmentAttributes,61},{acknowledgeEventNotification,62},{getAlarmSummary,63},{getAlarmEnrollmentSummary,64},{readJournal,65},{writeJournal,66},{initializeJournal,67},{reportJournalStatus,68},{createJournal,69},{deleteJournal,70},{getCapabilityList,71},{fileOpen,72},{fileRead,73},{fileClose,74},{fileRename,75},{fileDelete,76},{fileDirectory,77},{unsolicitedStatus,78},{informationReport,79},{eventNotification,80},{attachToEventCondition,81},{attachToSemaphore,82},{conclude,83},{cancel,84}], TagIn).



%%================================
%%  ServiceError
%%================================
enc_ServiceError(Val) ->
    enc_ServiceError(Val, [<<48>>]).

enc_ServiceError(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute errorClass(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ServiceError_errorClass'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute additionalCode(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute additionalDescription(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ServiceError_errorClass
%%================================
enc_ServiceError_errorClass(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      vmdstate ->
         encode_integer(element(2,Val), [{other,0},{'vmd-state-conflict',1},{'vmd-operational-problem',2},{'domain-transfer-problem',3},{'state-machine-id-invalid',4}], [<<128>>]);
      applicationreference ->
         encode_integer(element(2,Val), [{other,0},{'aplication-unreachable',1},{'connection-lost',2},{'application-reference-invalid',3},{'context-unsupported',4}], [<<129>>]);
      definition ->
         encode_integer(element(2,Val), [{other,0},{'object-undefined',1},{'invalid-address',2},{'type-unsupported',3},{'type-inconsistent',4},{'object-exists',5},{'object-attribute-inconsistent',6}], [<<130>>]);
      resource ->
         encode_integer(element(2,Val), [{other,0},{'memory-unavailable',1},{'processor-resource-unavailable',2},{'mass-storage-unavailable',3},{'capability-unavailable',4},{'capability-unknown',5}], [<<131>>]);
      service ->
         encode_integer(element(2,Val), [{other,0},{'primitives-out-of-sequence',1},{'object-state-conflict',2},{'pdu-size',3},{'continuation-invalid',4},{'object-constraint-conflict',5}], [<<132>>]);
      servicepreempt ->
         encode_integer(element(2,Val), [{other,0},{timeout,1},{deadlock,2},{cancel,3}], [<<133>>]);
      timeresolution ->
         encode_integer(element(2,Val), [{other,0},{'unsupportable-time-resolution',1}], [<<134>>]);
      access ->
         encode_integer(element(2,Val), [{other,0},{'object-access-unsupported',1},{'object-non-existent',2},{'object-access-denied',3},{'object-invalidated',4}], [<<135>>]);
      initiate ->
         encode_integer(element(2,Val), [{other,0},{'version-incompatible',1},{'max-segment-insufficient',2},{'max-services-outstanding-calling-insufficient',3},{'max-services-outstanding-called-insufficient',4},{'service-CBB-insufficient',5},{'parameter-CBB-insufficient',6},{'nesting-level-insufficient',7}], [<<136>>]);
      conclude ->
         encode_integer(element(2,Val), [{other,0},{'further-communication-required',1}], [<<137>>]);
      cancel ->
         encode_integer(element(2,Val), [{other,0},{'invoke-id-unknown',1},{'cancel-not-possible',2}], [<<138>>]);
      file ->
         encode_integer(element(2,Val), [{other,0},{'filename-ambiguous',1},{'file-busy',2},{'filename-syntaxError',3},{'content-type-invalid',4},{'position-invalid',5},{'file-acces-denied',6},{'file-non-existent',7},{'duplicate-filename',8},{'insufficient-space-in-filestore',9}], [<<139>>]);
      others ->
         encode_integer(element(2,Val), [<<140>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ServiceError(Tlv) ->
   dec_ServiceError(Tlv, [16]).

dec_ServiceError(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute errorClass(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ServiceError_errorClass'(V1, [131072]),

%%-------------------------------------------------
%% attribute additionalCode(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute additionalDescription(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'ServiceError',Term1,Term2,Term3},
Res1.
'dec_ServiceError_errorClass'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'vmdstate'
    {131072, V1} -> 
        {vmdstate, begin
Val1 = decode_integer(V1, []),
number2name(Val1, [{other,0},{'vmd-state-conflict',1},{'vmd-operational-problem',2},{'domain-transfer-problem',3},{'state-machine-id-invalid',4}])
end
};


%% 'applicationreference'
    {131073, V1} -> 
        {applicationreference, begin
Val2 = decode_integer(V1, []),
number2name(Val2, [{other,0},{'aplication-unreachable',1},{'connection-lost',2},{'application-reference-invalid',3},{'context-unsupported',4}])
end
};


%% 'definition'
    {131074, V1} -> 
        {definition, begin
Val3 = decode_integer(V1, []),
number2name(Val3, [{other,0},{'object-undefined',1},{'invalid-address',2},{'type-unsupported',3},{'type-inconsistent',4},{'object-exists',5},{'object-attribute-inconsistent',6}])
end
};


%% 'resource'
    {131075, V1} -> 
        {resource, begin
Val4 = decode_integer(V1, []),
number2name(Val4, [{other,0},{'memory-unavailable',1},{'processor-resource-unavailable',2},{'mass-storage-unavailable',3},{'capability-unavailable',4},{'capability-unknown',5}])
end
};


%% 'service'
    {131076, V1} -> 
        {service, begin
Val5 = decode_integer(V1, []),
number2name(Val5, [{other,0},{'primitives-out-of-sequence',1},{'object-state-conflict',2},{'pdu-size',3},{'continuation-invalid',4},{'object-constraint-conflict',5}])
end
};


%% 'servicepreempt'
    {131077, V1} -> 
        {servicepreempt, begin
Val6 = decode_integer(V1, []),
number2name(Val6, [{other,0},{timeout,1},{deadlock,2},{cancel,3}])
end
};


%% 'timeresolution'
    {131078, V1} -> 
        {timeresolution, begin
Val7 = decode_integer(V1, []),
number2name(Val7, [{other,0},{'unsupportable-time-resolution',1}])
end
};


%% 'access'
    {131079, V1} -> 
        {access, begin
Val8 = decode_integer(V1, []),
number2name(Val8, [{other,0},{'object-access-unsupported',1},{'object-non-existent',2},{'object-access-denied',3},{'object-invalidated',4}])
end
};


%% 'initiate'
    {131080, V1} -> 
        {initiate, begin
Val9 = decode_integer(V1, []),
number2name(Val9, [{other,0},{'version-incompatible',1},{'max-segment-insufficient',2},{'max-services-outstanding-calling-insufficient',3},{'max-services-outstanding-called-insufficient',4},{'service-CBB-insufficient',5},{'parameter-CBB-insufficient',6},{'nesting-level-insufficient',7}])
end
};


%% 'conclude'
    {131081, V1} -> 
        {conclude, begin
Val10 = decode_integer(V1, []),
number2name(Val10, [{other,0},{'further-communication-required',1}])
end
};


%% 'cancel'
    {131082, V1} -> 
        {cancel, begin
Val11 = decode_integer(V1, []),
number2name(Val11, [{other,0},{'invoke-id-unknown',1},{'cancel-not-possible',2}])
end
};


%% 'file'
    {131083, V1} -> 
        {file, begin
Val12 = decode_integer(V1, []),
number2name(Val12, [{other,0},{'filename-ambiguous',1},{'file-busy',2},{'filename-syntaxError',3},{'content-type-invalid',4},{'position-invalid',5},{'file-acces-denied',6},{'file-non-existent',7},{'duplicate-filename',8},{'insufficient-space-in-filestore',9}])
end
};


%% 'others'
    {131084, V1} -> 
        {others, decode_integer(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  GetNameListRequest
%%================================
enc_GetNameListRequest(Val) ->
    enc_GetNameListRequest(Val, [<<48>>]).

enc_GetNameListRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute objectClass(1)   External MMS:ObjectClass
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ObjectClass'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute objectScope(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_GetNameListRequest_objectScope'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute continueAfter(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GetNameListRequest_objectScope
%%================================
enc_GetNameListRequest_objectScope(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      vmdSpecific ->
         encode_null(element(2,Val), [<<128>>]);
      domainSpecific ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      aaSpecific ->
         encode_null(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_GetNameListRequest(Tlv) ->
   dec_GetNameListRequest(Tlv, [16]).

dec_GetNameListRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute objectClass(1)   External MMS:ObjectClass
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ObjectClass'(V1, [131072]),

%%-------------------------------------------------
%% attribute objectScope(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_GetNameListRequest_objectScope'(V2, [131073]),

%%-------------------------------------------------
%% attribute continueAfter(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'GetNameListRequest',Term1,Term2,Term3},
Res1.
'dec_GetNameListRequest_objectScope'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'vmdSpecific'
    {131072, V1} -> 
        {vmdSpecific, decode_null(V1, [])};


%% 'domainSpecific'
    {131073, V1} -> 
        {domainSpecific, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'aaSpecific'
    {131074, V1} -> 
        {aaSpecific, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ObjectClass
%%================================
enc_ObjectClass(Val) ->
    enc_ObjectClass(Val, []).

enc_ObjectClass(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      basicObjectClass ->
         encode_integer(element(2,Val), [{namedVariable,0},{scatteredAccess,1},{namedVariableList,2},{namedType,3},{semaphore,4},{eventCondition,5},{eventAction,6},{eventEnrollment,7},{journal,8},{domain,9},{programInvocation,10},{operatorStation,11},{dataExchange,12},{accessControlList,13}], [<<128>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ObjectClass(Tlv) ->
   dec_ObjectClass(Tlv, []).

dec_ObjectClass(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'basicObjectClass'
    {131072, V1} -> 
        {basicObjectClass, begin
Val1 = decode_integer(V1, []),
number2name(Val1, [{namedVariable,0},{scatteredAccess,1},{namedVariableList,2},{namedType,3},{semaphore,4},{eventCondition,5},{eventAction,6},{eventEnrollment,7},{journal,8},{domain,9},{programInvocation,10},{operatorStation,11},{dataExchange,12},{accessControlList,13}])
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  GetNameListResponse
%%================================
enc_GetNameListResponse(Val) ->
    enc_GetNameListResponse(Val, [<<48>>]).

enc_GetNameListResponse(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute listOfIdentifier(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_GetNameListResponse_listOfIdentifier'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute moreFollows(2) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT ->
            {<<>>,0};
         _ when Cindex2 =:= true ->
            {<<>>,0};
         _ ->
            encode_boolean(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GetNameListResponse_listOfIdentifier
%%================================
enc_GetNameListResponse_listOfIdentifier(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GetNameListResponse_listOfIdentifier_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GetNameListResponse_listOfIdentifier_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GetNameListResponse_listOfIdentifier_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<26>>]),
   'enc_GetNameListResponse_listOfIdentifier_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_GetNameListResponse(Tlv) ->
   dec_GetNameListResponse(Tlv, [16]).

dec_GetNameListResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute listOfIdentifier(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_GetNameListResponse_listOfIdentifier'(V1, [131072]),

%%-------------------------------------------------
%% attribute moreFollows(2) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_boolean(V2, []), TempTlv3};
    _ ->
        {true,Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'GetNameListResponse',Term1,Term2},
Res1.
'dec_GetNameListResponse_listOfIdentifier'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
binary_to_list(decode_restricted_string(V1, [26]))
end
 || V1 <- Tlv1].




%%================================
%%  TypeSpecification
%%================================
enc_TypeSpecification(Val) ->
    enc_TypeSpecification(Val, []).

enc_TypeSpecification(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      array ->
         'enc_TypeSpecification_array'(element(2,Val), [<<161>>]);
      structure ->
         'enc_TypeSpecification_structure'(element(2,Val), [<<162>>]);
      boolean ->
         encode_null(element(2,Val), [<<131>>]);
      bitstring ->
         encode_integer(element(2,Val), [<<132>>]);
      integer ->
         encode_integer(element(2,Val), [<<133>>]);
      unsigned ->
         encode_integer(element(2,Val), [<<134>>]);
      floatingpoint ->
         'enc_TypeSpecification_floatingpoint'(element(2,Val), [<<167>>]);
      octetstring ->
         encode_integer(element(2,Val), [<<137>>]);
      visiblestring ->
         encode_integer(element(2,Val), [<<138>>]);
      binarytime ->
         encode_boolean(element(2,Val), [<<140>>]);
      mmsstring ->
         encode_integer(element(2,Val), [<<144>>]);
      utctime ->
         encode_null(element(2,Val), [<<145>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  TypeSpecification_array
%%================================
enc_TypeSpecification_array(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute packed(1) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT ->
            {<<>>,0};
         _ when Cindex1 =:= false ->
            {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute elementType(3)   External MMS:TypeSpecification
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_TypeSpecification'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TypeSpecification_structure
%%================================
enc_TypeSpecification_structure(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute packed(1) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT ->
            {<<>>,0};
         _ when Cindex1 =:= false ->
            {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute components(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TypeSpecification_structure_components'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TypeSpecification_structure_components
%%================================
enc_TypeSpecification_structure_components(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TypeSpecification_structure_components_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TypeSpecification_structure_components_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TypeSpecification_structure_components_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_StructComponent'(H, [<<48>>]),
   'enc_TypeSpecification_structure_components_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TypeSpecification_floatingpoint
%%================================
enc_TypeSpecification_floatingpoint(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute formatwidth(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute exponentwidth(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_TypeSpecification(Tlv) ->
   dec_TypeSpecification(Tlv, []).

dec_TypeSpecification(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'array'
    {131073, V1} -> 
        {array, 'dec_TypeSpecification_array'(V1, [])};


%% 'structure'
    {131074, V1} -> 
        {structure, 'dec_TypeSpecification_structure'(V1, [])};


%% 'boolean'
    {131075, V1} -> 
        {boolean, decode_null(V1, [])};


%% 'bitstring'
    {131076, V1} -> 
        {bitstring, begin
Val1 = decode_integer(V1, []),
if -2147483648 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'integer'
    {131077, V1} -> 
        {integer, begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'unsigned'
    {131078, V1} -> 
        {unsigned, begin
Val3 = decode_integer(V1, []),
if 0 =< Val3, Val3 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'floatingpoint'
    {131079, V1} -> 
        {floatingpoint, 'dec_TypeSpecification_floatingpoint'(V1, [])};


%% 'octetstring'
    {131081, V1} -> 
        {octetstring, begin
Val4 = decode_integer(V1, []),
if -2147483648 =< Val4, Val4 =< 2147483647 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'visiblestring'
    {131082, V1} -> 
        {visiblestring, begin
Val5 = decode_integer(V1, []),
if -2147483648 =< Val5, Val5 =< 2147483647 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'binarytime'
    {131084, V1} -> 
        {binarytime, decode_boolean(V1, [])};


%% 'mmsstring'
    {131088, V1} -> 
        {mmsstring, begin
Val6 = decode_integer(V1, []),
if -2147483648 =< Val6, Val6 =< 2147483647 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'utctime'
    {131089, V1} -> 
        {utctime, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_TypeSpecification_array'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute packed(1) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        {false,Tlv1}
end,

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute elementType(3)   External MMS:TypeSpecification
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_TypeSpecification'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'TypeSpecification_array',Term1,Term2,Term3},
Res1.
'dec_TypeSpecification_structure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute packed(1) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        {false,Tlv1}
end,

%%-------------------------------------------------
%% attribute components(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TypeSpecification_structure_components'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TypeSpecification_structure',Term1,Term2},
Res1.
'dec_TypeSpecification_structure_components'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_StructComponent'(V1, [16]) || V1 <- Tlv1].


'dec_TypeSpecification_floatingpoint'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute formatwidth(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute exponentwidth(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [2]),
if 0 =< Val2, Val2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'TypeSpecification_floatingpoint',Term1,Term2},
Res1.


%%================================
%%  StructComponent
%%================================
enc_StructComponent(Val) ->
    enc_StructComponent(Val, [<<48>>]).

enc_StructComponent(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute componentName(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute componentType(2)   External MMS:TypeSpecification
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TypeSpecification'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_StructComponent(Tlv) ->
   dec_StructComponent(Tlv, [16]).

dec_StructComponent(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute componentName(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute componentType(2)   External MMS:TypeSpecification
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TypeSpecification'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'StructComponent',Term1,Term2},
Res1.


%%================================
%%  AlternateAccess
%%================================
enc_AlternateAccess(Val) ->
    enc_AlternateAccess(Val, [<<48>>]).

enc_AlternateAccess(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_AlternateAccess_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AlternateAccess_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AlternateAccess_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AlternateAccess_SEQOF'(H, []),
   'enc_AlternateAccess_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  AlternateAccess_SEQOF
%%================================
enc_AlternateAccess_SEQOF(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      selectAlternateAccess ->
         'enc_AlternateAccess_SEQOF_selectAlternateAccess'(element(2,Val), [<<160>>]);
      component ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      index ->
         encode_integer(element(2,Val), [<<130>>]);
      indexRange ->
         'enc_IndexRangeSeq'(element(2,Val), [<<163>>]);
      allElements ->
         encode_null(element(2,Val), [<<132>>]);
      named ->
         'enc_AlternateAccess_SEQOF_named'(element(2,Val), [<<165>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  AlternateAccess_SEQOF_selectAlternateAccess
%%================================
enc_AlternateAccess_SEQOF_selectAlternateAccess(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute accessSelection(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection'(Cindex1, []),

%%-------------------------------------------------
%% attribute alternateAccess(2)   External MMS:AlternateAccess
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AlternateAccess'(Cindex2, []),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AlternateAccess_SEQOF_selectAlternateAccess_accessSelection
%%================================
enc_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      component ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      index ->
         encode_integer(element(2,Val), [<<129>>]);
      indexRange ->
         'enc_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection_indexRange'(element(2,Val), [<<162>>]);
      allElements ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  AlternateAccess_SEQOF_selectAlternateAccess_accessSelection_indexRange
%%================================
enc_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection_indexRange(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute lowIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AlternateAccess_SEQOF_named
%%================================
enc_AlternateAccess_SEQOF_named(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute componentName(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute accesst(2)   External MMS:AlternateAccessSelection
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AlternateAccessSelection'(Cindex2, []),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_AlternateAccess(Tlv) ->
   dec_AlternateAccess(Tlv, [16]).

dec_AlternateAccess(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AlternateAccess_SEQOF'(V1, []) || V1 <- Tlv1].


'dec_AlternateAccess_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'selectAlternateAccess'
    {131072, V1} -> 
        {selectAlternateAccess, 'dec_AlternateAccess_SEQOF_selectAlternateAccess'(V1, [])};


%% 'component'
    {131073, V1} -> 
        {component, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'index'
    {131074, V1} -> 
        {index, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'indexRange'
    {131075, V1} -> 
        {indexRange, 'dec_IndexRangeSeq'(V1, [])};


%% 'allElements'
    {131076, V1} -> 
        {allElements, decode_null(V1, [])};


%% 'named'
    {131077, V1} -> 
        {named, 'dec_AlternateAccess_SEQOF_named'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_AlternateAccess_SEQOF_selectAlternateAccess'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute accessSelection(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection'(V1, []),

%%-------------------------------------------------
%% attribute alternateAccess(2)   External MMS:AlternateAccess
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_AlternateAccess'(V2, []),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'AlternateAccess_SEQOF_selectAlternateAccess',Term1,Term2},
Res1.
'dec_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'component'
    {131072, V1} -> 
        {component, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'index'
    {131073, V1} -> 
        {index, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'indexRange'
    {131074, V1} -> 
        {indexRange, 'dec_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection_indexRange'(V1, [])};


%% 'allElements'
    {131075, V1} -> 
        {allElements, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_AlternateAccess_SEQOF_selectAlternateAccess_accessSelection_indexRange'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute lowIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 4294967295 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'AlternateAccess_SEQOF_selectAlternateAccess_accessSelection_indexRange',Term1,Term2},
Res1.
'dec_AlternateAccess_SEQOF_named'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute componentName(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute accesst(2)   External MMS:AlternateAccessSelection
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_AlternateAccessSelection'(V2, []),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'AlternateAccess_SEQOF_named',Term1,Term2},
Res1.


%%================================
%%  AlternateAccessSelection
%%================================
enc_AlternateAccessSelection(Val) ->
    enc_AlternateAccessSelection(Val, []).

enc_AlternateAccessSelection(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      selectAlternateAccess ->
         'enc_AlternateAccessSelection_selectAlternateAccess'(element(2,Val), [<<160>>]);
      component ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      index ->
         encode_integer(element(2,Val), [<<130>>]);
      indexRange ->
         'enc_IndexRangeSeq'(element(2,Val), [<<163>>]);
      allElements ->
         encode_null(element(2,Val), [<<132>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  AlternateAccessSelection_selectAlternateAccess
%%================================
enc_AlternateAccessSelection_selectAlternateAccess(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5} = Val,

%%-------------------------------------------------
%% attribute component(1) with type VisibleString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute index(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute indexRange(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_AlternateAccessSelection_selectAlternateAccess_indexRange'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute allElements(4) with type NULL
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_null(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute alternateAccess(5)   External MMS:AlternateAccess
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_AlternateAccess'(Cindex5, []),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AlternateAccessSelection_selectAlternateAccess_indexRange
%%================================
enc_AlternateAccessSelection_selectAlternateAccess_indexRange(Val, TagIn) ->
   {_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute lowIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_AlternateAccessSelection(Tlv) ->
   dec_AlternateAccessSelection(Tlv, []).

dec_AlternateAccessSelection(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'selectAlternateAccess'
    {131072, V1} -> 
        {selectAlternateAccess, 'dec_AlternateAccessSelection_selectAlternateAccess'(V1, [])};


%% 'component'
    {131073, V1} -> 
        {component, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'index'
    {131074, V1} -> 
        {index, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'indexRange'
    {131075, V1} -> 
        {indexRange, 'dec_IndexRangeSeq'(V1, [])};


%% 'allElements'
    {131076, V1} -> 
        {allElements, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_AlternateAccessSelection_selectAlternateAccess'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute component(1) with type VisibleString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute index(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute indexRange(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_AlternateAccessSelection_selectAlternateAccess_indexRange'(V3, [131074]),

%%-------------------------------------------------
%% attribute allElements(4) with type NULL
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_null(V4, [131075]),

%%-------------------------------------------------
%% attribute alternateAccess(5)   External MMS:AlternateAccess
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_AlternateAccess'(V5, []),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
Res1 = {'AlternateAccessSelection_selectAlternateAccess',Term1,Term2,Term3,Term4,Term5},
Res1.
'dec_AlternateAccessSelection_selectAlternateAccess_indexRange'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute lowIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 4294967295 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'AlternateAccessSelection_selectAlternateAccess_indexRange',Term1,Term2},
Res1.


%%================================
%%  IndexRangeSeq
%%================================
enc_IndexRangeSeq(Val) ->
    enc_IndexRangeSeq(Val, [<<48>>]).

enc_IndexRangeSeq(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute lowIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_IndexRangeSeq(Tlv) ->
   dec_IndexRangeSeq(Tlv, [16]).

dec_IndexRangeSeq(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute lowIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numberOfElements(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 4294967295 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'IndexRangeSeq',Term1,Term2},
Res1.


%%================================
%%  ReadRequest
%%================================
enc_ReadRequest(Val) ->
    enc_ReadRequest(Val, [<<48>>]).

enc_ReadRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute specificationWithResult(1) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT ->
            {<<>>,0};
         _ when Cindex1 =:= false ->
            {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute variableAccessSpecification(2)   External MMS:VariableAccessSpecification
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_VariableAccessSpecification'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ReadRequest(Tlv) ->
   dec_ReadRequest(Tlv, [16]).

dec_ReadRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute specificationWithResult(1) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        {false,Tlv1}
end,

%%-------------------------------------------------
%% attribute variableAccessSpecification(2)   External MMS:VariableAccessSpecification
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_VariableAccessSpecification'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ReadRequest',Term1,Term2},
Res1.


%%================================
%%  ReadResponse
%%================================
enc_ReadResponse(Val) ->
    enc_ReadResponse(Val, [<<48>>]).

enc_ReadResponse(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute variableAccessSpecification(1)   External MMS:VariableAccessSpecification OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_VariableAccessSpecification'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute listOfAccessResult(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReadResponse_listOfAccessResult'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReadResponse_listOfAccessResult
%%================================
enc_ReadResponse_listOfAccessResult(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ReadResponse_listOfAccessResult_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ReadResponse_listOfAccessResult_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReadResponse_listOfAccessResult_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AccessResult'(H, []),
   'enc_ReadResponse_listOfAccessResult_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_ReadResponse(Tlv) ->
   dec_ReadResponse(Tlv, [16]).

dec_ReadResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute variableAccessSpecification(1)   External MMS:VariableAccessSpecification OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_VariableAccessSpecification'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute listOfAccessResult(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ReadResponse_listOfAccessResult'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'ReadResponse',Term1,Term2},
Res1.
'dec_ReadResponse_listOfAccessResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AccessResult'(V1, []) || V1 <- Tlv1].




%%================================
%%  WriteRequest
%%================================
enc_WriteRequest(Val) ->
    enc_WriteRequest(Val, [<<48>>]).

enc_WriteRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute variableAccessSpecification(1)   External MMS:VariableAccessSpecification
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_VariableAccessSpecification'(Cindex1, []),

%%-------------------------------------------------
%% attribute listOfData(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_WriteRequest_listOfData'(Cindex2, [<<160>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  WriteRequest_listOfData
%%================================
enc_WriteRequest_listOfData(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_WriteRequest_listOfData_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_WriteRequest_listOfData_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_WriteRequest_listOfData_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Data'(H, []),
   'enc_WriteRequest_listOfData_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_WriteRequest(Tlv) ->
   dec_WriteRequest(Tlv, [16]).

dec_WriteRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute variableAccessSpecification(1)   External MMS:VariableAccessSpecification
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_VariableAccessSpecification'(V1, []),

%%-------------------------------------------------
%% attribute listOfData(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_WriteRequest_listOfData'(V2, [131072]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'WriteRequest',Term1,Term2},
Res1.
'dec_WriteRequest_listOfData'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Data'(V1, []) || V1 <- Tlv1].




%%================================
%%  WriteResponse
%%================================
enc_WriteResponse(Val) ->
    enc_WriteResponse(Val, [<<48>>]).

enc_WriteResponse(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_WriteResponse_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_WriteResponse_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_WriteResponse_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_WriteResponse_SEQOF'(H, []),
   'enc_WriteResponse_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  WriteResponse_SEQOF
%%================================
enc_WriteResponse_SEQOF(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      failure ->
         encode_integer(element(2,Val), [{objectinvalidated,0},{hardwarefault,1},{temporarilyunavailable,2},{objectaccessdenied,3},{objectundefined,4},{invalidaddress,5},{typeunsupported,6},{typeinconsistent,7},{objectattributeinconsistent,8},{objectaccessunsupported,9},{objectnonexistent,10},{objectvalueinvalid,11}], [<<128>>]);
      success ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_WriteResponse(Tlv) ->
   dec_WriteResponse(Tlv, [16]).

dec_WriteResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_WriteResponse_SEQOF'(V1, []) || V1 <- Tlv1].


'dec_WriteResponse_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'failure'
    {131072, V1} -> 
        {failure, begin
Val1 = decode_integer(V1, []),
number2name(Val1, [{objectinvalidated,0},{hardwarefault,1},{temporarilyunavailable,2},{objectaccessdenied,3},{objectundefined,4},{invalidaddress,5},{typeunsupported,6},{typeinconsistent,7},{objectattributeinconsistent,8},{objectaccessunsupported,9},{objectnonexistent,10},{objectvalueinvalid,11}])
end
};


%% 'success'
    {131073, V1} -> 
        {success, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  GetVariableAccessAttributesRequest
%%================================
enc_GetVariableAccessAttributesRequest(Val) ->
    enc_GetVariableAccessAttributesRequest(Val, []).

enc_GetVariableAccessAttributesRequest(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      name ->
         'enc_ObjectName'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_GetVariableAccessAttributesRequest(Tlv) ->
   dec_GetVariableAccessAttributesRequest(Tlv, []).

dec_GetVariableAccessAttributesRequest(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'name'
    {131072, V1} -> 
        {name, 'dec_ObjectName'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  GetVariableAccessAttributesResponse
%%================================
enc_GetVariableAccessAttributesResponse(Val) ->
    enc_GetVariableAccessAttributesResponse(Val, [<<48>>]).

enc_GetVariableAccessAttributesResponse(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute mmsDeletable(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute typeSpecification(2)   External MMS:TypeSpecification
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TypeSpecification'(Cindex2, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_GetVariableAccessAttributesResponse(Tlv) ->
   dec_GetVariableAccessAttributesResponse(Tlv, [16]).

dec_GetVariableAccessAttributesResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mmsDeletable(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute typeSpecification(2)   External MMS:TypeSpecification
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TypeSpecification'(V2, [131074]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'GetVariableAccessAttributesResponse',Term1,Term2},
Res1.


%%================================
%%  InformationReport
%%================================
enc_InformationReport(Val) ->
    enc_InformationReport(Val, [<<48>>]).

enc_InformationReport(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute variableAccessSpecification(1)   External MMS:VariableAccessSpecification
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_VariableAccessSpecification'(Cindex1, []),

%%-------------------------------------------------
%% attribute listOfAccessResult(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_InformationReport_listOfAccessResult'(Cindex2, [<<160>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  InformationReport_listOfAccessResult
%%================================
enc_InformationReport_listOfAccessResult(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_InformationReport_listOfAccessResult_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InformationReport_listOfAccessResult_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InformationReport_listOfAccessResult_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AccessResult'(H, []),
   'enc_InformationReport_listOfAccessResult_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_InformationReport(Tlv) ->
   dec_InformationReport(Tlv, [16]).

dec_InformationReport(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute variableAccessSpecification(1)   External MMS:VariableAccessSpecification
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_VariableAccessSpecification'(V1, []),

%%-------------------------------------------------
%% attribute listOfAccessResult(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_InformationReport_listOfAccessResult'(V2, [131072]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'InformationReport',Term1,Term2},
Res1.
'dec_InformationReport_listOfAccessResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AccessResult'(V1, []) || V1 <- Tlv1].




%%================================
%%  DefineNamedVariableListRequest
%%================================
enc_DefineNamedVariableListRequest(Val) ->
    enc_DefineNamedVariableListRequest(Val, [<<48>>]).

enc_DefineNamedVariableListRequest(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute variableListName(1)   External MMS:ObjectName
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ObjectName'(Cindex1, []),

%%-------------------------------------------------
%% attribute listOfVariable(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DefineNamedVariableListRequest_listOfVariable'(Cindex2, [<<160>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DefineNamedVariableListRequest_listOfVariable
%%================================
enc_DefineNamedVariableListRequest_listOfVariable(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DefineNamedVariableListRequest_listOfVariable_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DefineNamedVariableListRequest_listOfVariable_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DefineNamedVariableListRequest_listOfVariable_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_VariableDef'(H, [<<48>>]),
   'enc_DefineNamedVariableListRequest_listOfVariable_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_DefineNamedVariableListRequest(Tlv) ->
   dec_DefineNamedVariableListRequest(Tlv, [16]).

dec_DefineNamedVariableListRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute variableListName(1)   External MMS:ObjectName
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ObjectName'(V1, []),

%%-------------------------------------------------
%% attribute listOfVariable(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DefineNamedVariableListRequest_listOfVariable'(V2, [131072]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'DefineNamedVariableListRequest',Term1,Term2},
Res1.
'dec_DefineNamedVariableListRequest_listOfVariable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_VariableDef'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  DefineNamedVariableListResponse
%%================================
enc_DefineNamedVariableListResponse(Val) ->
    enc_DefineNamedVariableListResponse(Val, [<<5>>]).

enc_DefineNamedVariableListResponse(Val, TagIn) ->
encode_null(Val, TagIn).


dec_DefineNamedVariableListResponse(Tlv) ->
   dec_DefineNamedVariableListResponse(Tlv, [5]).

dec_DefineNamedVariableListResponse(Tlv, TagIn) ->
decode_null(Tlv, TagIn).



%%================================
%%  GetNamedVariableListAttributesRequest
%%================================
enc_GetNamedVariableListAttributesRequest(Val) ->
    enc_GetNamedVariableListAttributesRequest(Val, []).

enc_GetNamedVariableListAttributesRequest(Val, TagIn) ->
   enc_ObjectName(Val, TagIn).


dec_GetNamedVariableListAttributesRequest(Tlv) ->
   dec_GetNamedVariableListAttributesRequest(Tlv, []).

dec_GetNamedVariableListAttributesRequest(Tlv, TagIn) ->
'dec_ObjectName'(Tlv, TagIn).



%%================================
%%  GetNamedVariableListAttributesResponse
%%================================
enc_GetNamedVariableListAttributesResponse(Val) ->
    enc_GetNamedVariableListAttributesResponse(Val, [<<48>>]).

enc_GetNamedVariableListAttributesResponse(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute mmsDeletable(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute listOfVariable(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_GetNamedVariableListAttributesResponse_listOfVariable'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GetNamedVariableListAttributesResponse_listOfVariable
%%================================
enc_GetNamedVariableListAttributesResponse_listOfVariable(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GetNamedVariableListAttributesResponse_listOfVariable_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GetNamedVariableListAttributesResponse_listOfVariable_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GetNamedVariableListAttributesResponse_listOfVariable_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_VariableDef'(H, [<<48>>]),
   'enc_GetNamedVariableListAttributesResponse_listOfVariable_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_GetNamedVariableListAttributesResponse(Tlv) ->
   dec_GetNamedVariableListAttributesResponse(Tlv, [16]).

dec_GetNamedVariableListAttributesResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mmsDeletable(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute listOfVariable(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_GetNamedVariableListAttributesResponse_listOfVariable'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'GetNamedVariableListAttributesResponse',Term1,Term2},
Res1.
'dec_GetNamedVariableListAttributesResponse_listOfVariable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_VariableDef'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  DeleteNamedVariableListRequest
%%================================
enc_DeleteNamedVariableListRequest(Val) ->
    enc_DeleteNamedVariableListRequest(Val, [<<48>>]).

enc_DeleteNamedVariableListRequest(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute scopeOfDelete(1) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT ->
            {<<>>,0};
         _ when Cindex1 =:= 0 ->
            {<<>>,0};
         _ ->
            encode_integer(Cindex1, [{specific,0},{'aa-specific',1},{domain,2},{vmd,3}], [<<128>>])
       end,

%%-------------------------------------------------
%% attribute listOfVariableListName(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DeleteNamedVariableListRequest_listOfVariableListName'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute domainName(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DeleteNamedVariableListRequest_listOfVariableListName
%%================================
enc_DeleteNamedVariableListRequest_listOfVariableListName(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DeleteNamedVariableListRequest_listOfVariableListName_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DeleteNamedVariableListRequest_listOfVariableListName_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DeleteNamedVariableListRequest_listOfVariableListName_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ObjectName'(H, []),
   'enc_DeleteNamedVariableListRequest_listOfVariableListName_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_DeleteNamedVariableListRequest(Tlv) ->
   dec_DeleteNamedVariableListRequest(Tlv, [16]).

dec_DeleteNamedVariableListRequest(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute scopeOfDelete(1) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
number2name(Val1, [{specific,0},{'aa-specific',1},{domain,2},{vmd,3}])
end
, TempTlv2};
    _ ->
        {0,Tlv1}
end,

%%-------------------------------------------------
%% attribute listOfVariableListName(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_DeleteNamedVariableListRequest_listOfVariableListName'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute domainName(3) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'DeleteNamedVariableListRequest',Term1,Term2,Term3},
Res1.
'dec_DeleteNamedVariableListRequest_listOfVariableListName'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ObjectName'(V1, []) || V1 <- Tlv1].




%%================================
%%  DeleteNamedVariableListResponse
%%================================
enc_DeleteNamedVariableListResponse(Val) ->
    enc_DeleteNamedVariableListResponse(Val, [<<48>>]).

enc_DeleteNamedVariableListResponse(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute numberMatched(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute numberDeleted(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_DeleteNamedVariableListResponse(Tlv) ->
   dec_DeleteNamedVariableListResponse(Tlv, [16]).

dec_DeleteNamedVariableListResponse(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute numberMatched(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numberDeleted(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 4294967295 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'DeleteNamedVariableListResponse',Term1,Term2},
Res1.


%%================================
%%  AccessResult
%%================================
enc_AccessResult(Val) ->
    enc_AccessResult(Val, []).

enc_AccessResult(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      failure ->
         encode_integer(element(2,Val), [{objectinvalidated,0},{hardwarefault,1},{temporarilyunavailable,2},{objectaccessdenied,3},{objectundefined,4},{invalidaddress,5},{typeunsupported,6},{typeinconsistent,7},{objectattributeinconsistent,8},{objectaccessunsupported,9},{objectnonexistent,10},{objectvalueinvalid,11}], [<<128>>]);
      success ->
         'enc_Data'(element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_AccessResult(Tlv) ->
   dec_AccessResult(Tlv, []).

dec_AccessResult(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'failure'
    {131072, V1} -> 
        {failure, begin
Val1 = decode_integer(V1, []),
number2name(Val1, [{objectinvalidated,0},{hardwarefault,1},{temporarilyunavailable,2},{objectaccessdenied,3},{objectundefined,4},{invalidaddress,5},{typeunsupported,6},{typeinconsistent,7},{objectattributeinconsistent,8},{objectaccessunsupported,9},{objectnonexistent,10},{objectvalueinvalid,11}])
end
};


%% 'success'
    V1 = {131073,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131074,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131075,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131076,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131077,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131078,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131079,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131081,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131082,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131084,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131088,_} -> 
        {success, 'dec_Data'(V1, [])};

    V1 = {131089,_} -> 
        {success, 'dec_Data'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DataAccessError
%%================================
enc_DataAccessError(Val) ->
    enc_DataAccessError(Val, [<<2>>]).

enc_DataAccessError(Val, TagIn) ->
encode_integer(Val, [{objectinvalidated,0},{hardwarefault,1},{temporarilyunavailable,2},{objectaccessdenied,3},{objectundefined,4},{invalidaddress,5},{typeunsupported,6},{typeinconsistent,7},{objectattributeinconsistent,8},{objectaccessunsupported,9},{objectnonexistent,10},{objectvalueinvalid,11}], TagIn).


dec_DataAccessError(Tlv) ->
   dec_DataAccessError(Tlv, [2]).

dec_DataAccessError(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
number2name(Val1, [{objectinvalidated,0},{hardwarefault,1},{temporarilyunavailable,2},{objectaccessdenied,3},{objectundefined,4},{invalidaddress,5},{typeunsupported,6},{typeinconsistent,7},{objectattributeinconsistent,8},{objectaccessunsupported,9},{objectnonexistent,10},{objectvalueinvalid,11}])
end
.



%%================================
%%  Data
%%================================
enc_Data(Val) ->
    enc_Data(Val, []).

enc_Data(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      array ->
         'enc_DataSequence'(element(2,Val), [<<161>>]);
      structure ->
         'enc_DataSequence'(element(2,Val), [<<162>>]);
      boolean ->
         encode_boolean(element(2,Val), [<<131>>]);
      bitstring ->
         encode_unnamed_bit_string(element(2,Val), [<<132>>]);
      integer ->
         encode_integer(element(2,Val), [<<133>>]);
      unsigned ->
         encode_integer(element(2,Val), [<<134>>]);
      floatingpoint ->
         encode_restricted_string(element(2,Val), [<<135>>]);
      octetstring ->
         encode_restricted_string(element(2,Val), [<<137>>]);
      visiblestring ->
         encode_restricted_string(element(2,Val), [<<138>>]);
      binarytime ->
         encode_restricted_string(element(2,Val), [<<140>>]);
      mmsstring ->
         encode_UTF8_string(element(2,Val), [<<144>>]);
      utctime ->
         encode_restricted_string(element(2,Val), [<<145>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_Data(Tlv) ->
   dec_Data(Tlv, []).

dec_Data(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'array'
    {131073, V1} -> 
        {array, 'dec_DataSequence'(V1, [])};


%% 'structure'
    {131074, V1} -> 
        {structure, 'dec_DataSequence'(V1, [])};


%% 'boolean'
    {131075, V1} -> 
        {boolean, decode_boolean(V1, [])};


%% 'bitstring'
    {131076, V1} -> 
        {bitstring, decode_native_bit_string(V1, [])};


%% 'integer'
    {131077, V1} -> 
        {integer, decode_integer(V1, [])};


%% 'unsigned'
    {131078, V1} -> 
        {unsigned, decode_integer(V1, [])};


%% 'floatingpoint'
    {131079, V1} -> 
        {floatingpoint, decode_octet_string(V1, [])};


%% 'octetstring'
    {131081, V1} -> 
        {octetstring, decode_octet_string(V1, [])};


%% 'visiblestring'
    {131082, V1} -> 
        {visiblestring, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'binarytime'
    {131084, V1} -> 
        {binarytime, decode_octet_string(V1, [])};


%% 'mmsstring'
    {131088, V1} -> 
        {mmsstring, decode_UTF8_string(V1, [])};


%% 'utctime'
    {131089, V1} -> 
        {utctime, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DataSequence
%%================================
enc_DataSequence(Val) ->
    enc_DataSequence(Val, [<<48>>]).

enc_DataSequence(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DataSequence_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DataSequence_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DataSequence_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Data'(H, []),
   'enc_DataSequence_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_DataSequence(Tlv) ->
   dec_DataSequence(Tlv, [16]).

dec_DataSequence(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Data'(V1, []) || V1 <- Tlv1].




%%================================
%%  FloatingPoint
%%================================
enc_FloatingPoint(Val) ->
    enc_FloatingPoint(Val, [<<4>>]).

enc_FloatingPoint(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_FloatingPoint(Tlv) ->
   dec_FloatingPoint(Tlv, [4]).

dec_FloatingPoint(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  VariableAccessSpecification
%%================================
enc_VariableAccessSpecification(Val) ->
    enc_VariableAccessSpecification(Val, []).

enc_VariableAccessSpecification(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      listOfVariable ->
         'enc_VariableAccessSpecification_listOfVariable'(element(2,Val), [<<160>>]);
      variableListName ->
         'enc_ObjectName'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  VariableAccessSpecification_listOfVariable
%%================================
enc_VariableAccessSpecification_listOfVariable(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_VariableAccessSpecification_listOfVariable_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_VariableAccessSpecification_listOfVariable_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_VariableAccessSpecification_listOfVariable_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_VariableDef'(H, [<<48>>]),
   'enc_VariableAccessSpecification_listOfVariable_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_VariableAccessSpecification(Tlv) ->
   dec_VariableAccessSpecification(Tlv, []).

dec_VariableAccessSpecification(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'listOfVariable'
    {131072, V1} -> 
        {listOfVariable, 'dec_VariableAccessSpecification_listOfVariable'(V1, [])};


%% 'variableListName'
    {131073, V1} -> 
        {variableListName, 'dec_ObjectName'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_VariableAccessSpecification_listOfVariable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_VariableDef'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  VariableDef
%%================================
enc_VariableDef(Val) ->
    enc_VariableDef(Val, [<<48>>]).

enc_VariableDef(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute variableSpecification(1)   External MMS:VariableSpecification
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_VariableSpecification'(Cindex1, []),

%%-------------------------------------------------
%% attribute alternateAccess(2)   External MMS:AlternateAccess OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AlternateAccess'(Cindex2, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_VariableDef(Tlv) ->
   dec_VariableDef(Tlv, [16]).

dec_VariableDef(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute variableSpecification(1)   External MMS:VariableSpecification
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_VariableSpecification'(V1, []),

%%-------------------------------------------------
%% attribute alternateAccess(2)   External MMS:AlternateAccess OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131077,V2}|TempTlv3] ->
    {'dec_AlternateAccess'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'VariableDef',Term1,Term2},
Res1.


%%================================
%%  VariableSpecification
%%================================
enc_VariableSpecification(Val) ->
    enc_VariableSpecification(Val, []).

enc_VariableSpecification(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      name ->
         'enc_ObjectName'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_VariableSpecification(Tlv) ->
   dec_VariableSpecification(Tlv, []).

dec_VariableSpecification(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'name'
    {131072, V1} -> 
        {name, 'dec_ObjectName'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ScatteredAccessDescription
%%================================
enc_ScatteredAccessDescription(Val) ->
    enc_ScatteredAccessDescription(Val, [<<48>>]).

enc_ScatteredAccessDescription(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ScatteredAccessDescription_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ScatteredAccessDescription_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ScatteredAccessDescription_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ScatteredAccessDescription_SEQOF'(H, [<<48>>]),
   'enc_ScatteredAccessDescription_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ScatteredAccessDescription_SEQOF
%%================================
enc_ScatteredAccessDescription_SEQOF(Val, TagIn) ->
   {_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute componentName(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute variableSpecification(2)   External MMS:VariableSpecification
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_VariableSpecification'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute alternateAccess(3)   External MMS:AlternateAccess OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AlternateAccess'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_ScatteredAccessDescription(Tlv) ->
   dec_ScatteredAccessDescription(Tlv, [16]).

dec_ScatteredAccessDescription(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ScatteredAccessDescription_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_ScatteredAccessDescription_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute componentName(1) with type VisibleString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute variableSpecification(2)   External MMS:VariableSpecification
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_VariableSpecification'(V2, [131073]),

%%-------------------------------------------------
%% attribute alternateAccess(3)   External MMS:AlternateAccess OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_AlternateAccess'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'ScatteredAccessDescription_SEQOF',Term1,Term2,Term3},
Res1.

%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_UTF8_string(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin ->
            Bin
    end.

decode_bitstring2(1,
                  Unused,
                  <<B7:1,B6:1,B5:1,B4:1,B3:1,B2:1,B1:1,B0:1,_/binary>>) ->
    lists:sublist([B7,B6,B5,B4,B3,B2,B1,B0], 8 - Unused);
decode_bitstring2(Len,
                  Unused,
                  <<B7:1,
                    B6:1,
                    B5:1,
                    B4:1,
                    B3:1,
                    B2:1,
                    B1:1,
                    B0:1,
                    Buffer/binary>>) ->
    [B7,B6,B5,B4,B3,B2,B1,B0|decode_bitstring2(Len - 1, Unused, Buffer)].

decode_bitstring_NNL(BitList, NamedNumberList) ->
    decode_bitstring_NNL(BitList, NamedNumberList, 0, []).

decode_bitstring_NNL([], _, _No, Result) ->
    lists:reverse(Result);
decode_bitstring_NNL([B|BitList],
                     [{Name,No}|NamedNumberList],
                     No,
                     Result) ->
    if
        B =:= 0 ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 Result);
        true ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 [Name|Result])
    end;
decode_bitstring_NNL([1|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList,
                         NamedNumberList,
                         No + 1,
                         [{bit,No}|Result]);
decode_bitstring_NNL([0|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList, NamedNumberList, No + 1, Result).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_named_bit_string(Buffer, NamedNumberList, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            [];
        <<Unused,Bits/binary>> ->
            BitString = decode_bitstring2(byte_size(Bits), Unused, Bits),
            decode_bitstring_NNL(BitString, NamedNumberList)
    end.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

do_encode_named_bit_string([FirstVal|RestVal], NamedBitList, TagIn) ->
    ToSetPos = get_all_bitposes([FirstVal|RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = make_and_set_list(Size, ToSetPos, 0),
    {Len,Unused,OctetList} = encode_bitstring(BitList),
    encode_tags(TagIn, [Unused|OctetList], Len + 1).

encode_UTF8_string(UTF8String, TagIn) when is_binary(UTF8String) ->
    encode_tags(TagIn, UTF8String, byte_size(UTF8String));
encode_UTF8_string(UTF8String, TagIn) ->
    encode_tags(TagIn, UTF8String, length(UTF8String)).

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Val], 1);
encode_bitstring(Val) ->
    {Unused,Octet} = unused_bitlist(Val, 7, 0),
    {1,Unused,[Octet]}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest], Ack, Len) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Ack,Val], Len + 1);
encode_bitstring([], Ack, Len) ->
    {Len,0,Ack};
encode_bitstring(Rest, Ack, Len) ->
    {Unused,Val} = unused_bitlist(Rest, 7, 0),
    {Len + 1,Unused,[Ack,Val]}.

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, NamedNumberList, Tag) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedNumberList) of
        {_,NewVal} ->
            encode_tags(Tag, encode_integer(NewVal));
        _ ->
            exit({error,{asn1,{encode_integer_namednumber,Val}}})
    end;
encode_integer(Val, _NamedNumberList, Tag) ->
    encode_tags(Tag, encode_integer(Val)).

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_named_bit_string([H|_] = Bits, NamedBitList, TagIn)
    when is_atom(H) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([{bit,_}|_] = Bits, NamedBitList, TagIn) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([], _NamedBitList, TagIn) ->
    encode_unnamed_bit_string(<<>>, TagIn);
encode_named_bit_string(Bits, _NamedBitList, TagIn)
    when is_bitstring(Bits) ->
    encode_unnamed_bit_string(Bits, TagIn).

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

get_all_bitposes([{bit,ValPos}|Rest], NamedBitList, Ack) ->
    get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
get_all_bitposes([Val|Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName,ValPos} ->
            get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
        _ ->
            exit({error,{asn1,{bitstring_namedbit,Val}}})
    end;
get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

make_and_set_list(0, [], _) ->
    [];
make_and_set_list(0, _, _) ->
    exit({error,{asn1,bitstring_sizeconstraint}});
make_and_set_list(Len, [XPos|SetPos], XPos) ->
    [1|make_and_set_list(Len - 1, SetPos, XPos + 1)];
make_and_set_list(Len, [Pos|SetPos], XPos) ->
    [0|make_and_set_list(Len - 1, [Pos|SetPos], XPos + 1)];
make_and_set_list(Len, [], XPos) ->
    [0|make_and_set_list(Len - 1, [], XPos + 1)].

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

number2name(Int, NamedNumberList) ->
    case lists:keyfind(Int, 2, NamedNumberList) of
        {NamedVal,_} ->
            NamedVal;
        _ ->
            Int
    end.

unused_bitlist([], Trail, Ack) ->
    {Trail + 1,Ack};
unused_bitlist([Bit|Rest], Trail, Ack) ->
    unused_bitlist(Rest, Trail - 1, Bit bsl Trail bor Ack).
