%% Generated by the Erlang ASN.1 BER compiler. Version: 5.0.8
%% Purpose: Encoding and decoding of the types in ACSE.

-module('ACSE').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("ACSE.hrl").
-asn1_info([{vsn,'5.0.8'},
            {module,'ACSE'},
            {options,[ber,verbose,{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
enc_ACSEapdu/2,
enc_AARQapdu/2,
enc_AAREapdu/2,
enc_RLRQapdu/2,
enc_RLREapdu/2,
enc_ACSErequirements/2,
enc_Applicationcontextnamelist/2,
enc_Applicationcontextname/2,
enc_APtitle/2,
enc_AEqualifier/2,
enc_APtitleform2/2,
enc_AEqualifierform2/2,
enc_AEtitle/2,
enc_AEtitleform2/2,
enc_AEinvocationidentifier/2,
enc_APinvocationidentifier/2,
enc_Associateresult/2,
enc_Associatesourcediagnostic/2,
enc_Associationinformation/2,
enc_Myexternal/2,
enc_Authenticationvalue/2,
enc_Implementationdata/2,
enc_Mechanismname/2,
enc_Releaserequestreason/2,
enc_Releaseresponsereason/2
]).

-export([
dec_ACSEapdu/2,
dec_AARQapdu/2,
dec_AAREapdu/2,
dec_RLRQapdu/2,
dec_RLREapdu/2,
dec_ACSErequirements/2,
dec_Applicationcontextnamelist/2,
dec_Applicationcontextname/2,
dec_APtitle/2,
dec_AEqualifier/2,
dec_APtitleform2/2,
dec_AEqualifierform2/2,
dec_AEtitle/2,
dec_AEtitleform2/2,
dec_AEinvocationidentifier/2,
dec_APinvocationidentifier/2,
dec_Associateresult/2,
dec_Associatesourcediagnostic/2,
dec_Associationinformation/2,
dec_Myexternal/2,
dec_Authenticationvalue/2,
dec_Implementationdata/2,
dec_Mechanismname/2,
dec_Releaserequestreason/2,
dec_Releaseresponsereason/2
]).

-export([info/0]).

-export([encode/2,decode/2]).

encoding_rule() -> ber.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

decode(Type, Data) ->
try
   Result = decode_disp(Type, element(1, ber_decode_nif(Data))),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ACSEapdu', Data) -> enc_ACSEapdu(Data);
encode_disp('AARQapdu', Data) -> enc_AARQapdu(Data);
encode_disp('AAREapdu', Data) -> enc_AAREapdu(Data);
encode_disp('RLRQapdu', Data) -> enc_RLRQapdu(Data);
encode_disp('RLREapdu', Data) -> enc_RLREapdu(Data);
encode_disp('ACSErequirements', Data) -> enc_ACSErequirements(Data);
encode_disp('Applicationcontextnamelist', Data) -> enc_Applicationcontextnamelist(Data);
encode_disp('Applicationcontextname', Data) -> enc_Applicationcontextname(Data);
encode_disp('APtitle', Data) -> enc_APtitle(Data);
encode_disp('AEqualifier', Data) -> enc_AEqualifier(Data);
encode_disp('APtitleform2', Data) -> enc_APtitleform2(Data);
encode_disp('AEqualifierform2', Data) -> enc_AEqualifierform2(Data);
encode_disp('AEtitle', Data) -> enc_AEtitle(Data);
encode_disp('AEtitleform2', Data) -> enc_AEtitleform2(Data);
encode_disp('AEinvocationidentifier', Data) -> enc_AEinvocationidentifier(Data);
encode_disp('APinvocationidentifier', Data) -> enc_APinvocationidentifier(Data);
encode_disp('Associateresult', Data) -> enc_Associateresult(Data);
encode_disp('Associatesourcediagnostic', Data) -> enc_Associatesourcediagnostic(Data);
encode_disp('Associationinformation', Data) -> enc_Associationinformation(Data);
encode_disp('Myexternal', Data) -> enc_Myexternal(Data);
encode_disp('Authenticationvalue', Data) -> enc_Authenticationvalue(Data);
encode_disp('Implementationdata', Data) -> enc_Implementationdata(Data);
encode_disp('Mechanismname', Data) -> enc_Mechanismname(Data);
encode_disp('Releaserequestreason', Data) -> enc_Releaserequestreason(Data);
encode_disp('Releaseresponsereason', Data) -> enc_Releaseresponsereason(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ACSEapdu', Data) -> dec_ACSEapdu(Data);
decode_disp('AARQapdu', Data) -> dec_AARQapdu(Data);
decode_disp('AAREapdu', Data) -> dec_AAREapdu(Data);
decode_disp('RLRQapdu', Data) -> dec_RLRQapdu(Data);
decode_disp('RLREapdu', Data) -> dec_RLREapdu(Data);
decode_disp('ACSErequirements', Data) -> dec_ACSErequirements(Data);
decode_disp('Applicationcontextnamelist', Data) -> dec_Applicationcontextnamelist(Data);
decode_disp('Applicationcontextname', Data) -> dec_Applicationcontextname(Data);
decode_disp('APtitle', Data) -> dec_APtitle(Data);
decode_disp('AEqualifier', Data) -> dec_AEqualifier(Data);
decode_disp('APtitleform2', Data) -> dec_APtitleform2(Data);
decode_disp('AEqualifierform2', Data) -> dec_AEqualifierform2(Data);
decode_disp('AEtitle', Data) -> dec_AEtitle(Data);
decode_disp('AEtitleform2', Data) -> dec_AEtitleform2(Data);
decode_disp('AEinvocationidentifier', Data) -> dec_AEinvocationidentifier(Data);
decode_disp('APinvocationidentifier', Data) -> dec_APinvocationidentifier(Data);
decode_disp('Associateresult', Data) -> dec_Associateresult(Data);
decode_disp('Associatesourcediagnostic', Data) -> dec_Associatesourcediagnostic(Data);
decode_disp('Associationinformation', Data) -> dec_Associationinformation(Data);
decode_disp('Myexternal', Data) -> dec_Myexternal(Data);
decode_disp('Authenticationvalue', Data) -> dec_Authenticationvalue(Data);
decode_disp('Implementationdata', Data) -> dec_Implementationdata(Data);
decode_disp('Mechanismname', Data) -> dec_Mechanismname(Data);
decode_disp('Releaserequestreason', Data) -> dec_Releaserequestreason(Data);
decode_disp('Releaseresponsereason', Data) -> dec_Releaseresponsereason(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  ACSEapdu
%%================================
enc_ACSEapdu(Val) ->
    enc_ACSEapdu(Val, []).

enc_ACSEapdu(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      aarq ->
         'enc_AARQapdu'(element(2,Val), [<<96>>]);
      aare ->
         'enc_AAREapdu'(element(2,Val), [<<97>>]);
      rlrq ->
         'enc_RLRQapdu'(element(2,Val), [<<98>>]);
      rlre ->
         'enc_RLREapdu'(element(2,Val), [<<99>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_ACSEapdu(Tlv) ->
   dec_ACSEapdu(Tlv, []).

dec_ACSEapdu(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'aarq'
    {65536, V1} -> 
        {aarq, 'dec_AARQapdu'(V1, [])};


%% 'aare'
    {65537, V1} -> 
        {aare, 'dec_AAREapdu'(V1, [])};


%% 'rlrq'
    {65538, V1} -> 
        {rlrq, 'dec_RLRQapdu'(V1, [])};


%% 'rlre'
    {65539, V1} -> 
        {rlre, 'dec_RLREapdu'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  AARQapdu
%%================================
enc_AARQapdu(Val) ->
    enc_AARQapdu(Val, [<<96>>]).

enc_AARQapdu(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10,Cindex11,Cindex12,Cindex13,Cindex14,Cindex15,Cindex16} = Val,

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute applicationcontextname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_object_identifier(Cindex2, [<<6>>,<<161>>]),

%%-------------------------------------------------
%% attribute calledAPtitle(3)   External ACSE:APtitle OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_APtitle'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute calledAEqualifier(4)   External ACSE:AEqualifier OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AEqualifier'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute calledAPinvocationidentifier(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<2>>,<<164>>])
       end,

%%-------------------------------------------------
%% attribute calledAEinvocationidentifier(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<2>>,<<165>>])
       end,

%%-------------------------------------------------
%% attribute callingAPtitle(7)   External ACSE:APtitle OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_APtitle'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute callingAEqualifier(8)   External ACSE:AEqualifier OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AEqualifier'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute callingAPinvocationidentifier(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<2>>,<<168>>])
       end,

%%-------------------------------------------------
%% attribute callingAEinvocationidentifier(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<2>>,<<169>>])
       end,

%%-------------------------------------------------
%% attribute senderacserequirements(11) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_named_bit_string(Cindex11, [{authentication,0},{applicationcontextnegotiation,1}], [<<138>>])
       end,

%%-------------------------------------------------
%% attribute mechanismname(12) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_object_identifier(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute callingauthenticationvalue(13)   External ACSE:Authenticationvalue OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Authenticationvalue'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute applicationcontextnamelist(14)   External ACSE:Applicationcontextnamelist OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Applicationcontextnamelist'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute implementationinformation(15) with type GraphicString OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<157>>])
       end,

%%-------------------------------------------------
%% attribute userinformation(16)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Associationinformation'(Cindex16, [<<190>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_AARQapdu(Tlv) ->
   dec_AARQapdu(Tlv, [65536]).

dec_AARQapdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_native_bit_string(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute applicationcontextname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_object_identifier(V2, [131073,6]),

%%-------------------------------------------------
%% attribute calledAPtitle(3)   External ACSE:APtitle OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_APtitle'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute calledAEqualifier(4)   External ACSE:AEqualifier OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_AEqualifier'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute calledAPinvocationidentifier(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, [2]), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute calledAEinvocationidentifier(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, [2]), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute callingAPtitle(7)   External ACSE:APtitle OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_APtitle'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute callingAEqualifier(8)   External ACSE:AEqualifier OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_AEqualifier'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute callingAPinvocationidentifier(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, [2]), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute callingAEinvocationidentifier(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_integer(V10, [2]), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute senderacserequirements(11) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_named_bit_string(V11, [{authentication,0},{applicationcontextnegotiation,1}], []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute mechanismname(12) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_object_identifier(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute callingauthenticationvalue(13)   External ACSE:Authenticationvalue OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'dec_Authenticationvalue'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute applicationcontextnamelist(14)   External ACSE:Applicationcontextnamelist OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'dec_Applicationcontextnamelist'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute implementationinformation(15) with type GraphicString OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131101,V15}|TempTlv16] ->
    {begin
binary_to_list(decode_restricted_string(V15, []))
end
, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute userinformation(16)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131102,V16}|TempTlv17] ->
    {'dec_Associationinformation'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

case Tlv17 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv17}}}) % extra fields not allowed
end,
Res1 = {'AARQapdu',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16},
Res1.


%%================================
%%  AAREapdu
%%================================
enc_AAREapdu(Val) ->
    enc_AAREapdu(Val, [<<97>>]).

enc_AAREapdu(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10,Cindex11} = Val,

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute applicationcontextname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_object_identifier(Cindex2, [<<6>>,<<161>>]),

%%-------------------------------------------------
%% attribute result(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [{accepted,0},{rejectedpermanent,1},{rejectedtransient,2}], [<<2>>,<<162>>]),

%%-------------------------------------------------
%% attribute resultsourcediagnostic(4)   External ACSE:Associatesourcediagnostic
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_Associatesourcediagnostic'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute respondingAPtitle(5)   External ACSE:APtitle OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_APtitle'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute respondingAEqualifier(6)   External ACSE:AEqualifier OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AEqualifier'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute respondingAPinvocationidentifier(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<2>>,<<166>>])
       end,

%%-------------------------------------------------
%% attribute respondingAEinvocationidentifier(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<2>>,<<167>>])
       end,

%%-------------------------------------------------
%% attribute applicationcontextnamelist(9)   External ACSE:Applicationcontextnamelist OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Applicationcontextnamelist'(Cindex9, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute implementationinformation(10) with type GraphicString OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<157>>])
       end,

%%-------------------------------------------------
%% attribute userinformation(11)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Associationinformation'(Cindex11, [<<190>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_AAREapdu(Tlv) ->
   dec_AAREapdu(Tlv, [65537]).

dec_AAREapdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolversion(1) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_native_bit_string(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute applicationcontextname(2) with type OBJECT IDENTIFIER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_object_identifier(V2, [131073,6]),

%%-------------------------------------------------
%% attribute result(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074,2]),
number2name(Val1, [{accepted,0},{rejectedpermanent,1},{rejectedtransient,2}])
end
,

%%-------------------------------------------------
%% attribute resultsourcediagnostic(4)   External ACSE:Associatesourcediagnostic
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_Associatesourcediagnostic'(V4, [131075]),

%%-------------------------------------------------
%% attribute respondingAPtitle(5)   External ACSE:APtitle OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_APtitle'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute respondingAEqualifier(6)   External ACSE:AEqualifier OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_AEqualifier'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute respondingAPinvocationidentifier(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_integer(V7, [2]), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute respondingAEinvocationidentifier(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_integer(V8, [2]), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute applicationcontextnamelist(9)   External ACSE:Applicationcontextnamelist OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131083,V9}|TempTlv10] ->
    {'dec_Applicationcontextnamelist'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute implementationinformation(10) with type GraphicString OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131101,V10}|TempTlv11] ->
    {begin
binary_to_list(decode_restricted_string(V10, []))
end
, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute userinformation(11)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131102,V11}|TempTlv12] ->
    {'dec_Associationinformation'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
Res1 = {'AAREapdu',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},
Res1.


%%================================
%%  RLRQapdu
%%================================
enc_RLRQapdu(Val) ->
    enc_RLRQapdu(Val, [<<98>>]).

enc_RLRQapdu(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [{normal,0},{urgent,1},{userdefined,30}], [<<128>>])
       end,

%%-------------------------------------------------
%% attribute userinformation(2)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Associationinformation'(Cindex2, [<<190>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RLRQapdu(Tlv) ->
   dec_RLRQapdu(Tlv, [65538]).

dec_RLRQapdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
number2name(Val1, [{normal,0},{urgent,1},{userdefined,30}])
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute userinformation(2)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131102,V2}|TempTlv3] ->
    {'dec_Associationinformation'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'RLRQapdu',Term1,Term2},
Res1.


%%================================
%%  RLREapdu
%%================================
enc_RLREapdu(Val) ->
    enc_RLREapdu(Val, [<<99>>]).

enc_RLREapdu(Val, TagIn) ->
{_,Cindex1,Cindex2} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [{normal,0},{notfinished,1},{userdefined,30}], [<<128>>])
       end,

%%-------------------------------------------------
%% attribute userinformation(2)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Associationinformation'(Cindex2, [<<190>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


dec_RLREapdu(Tlv) ->
   dec_RLREapdu(Tlv, [65539]).

dec_RLREapdu(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
number2name(Val1, [{normal,0},{notfinished,1},{userdefined,30}])
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute userinformation(2)   External ACSE:Associationinformation OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131102,V2}|TempTlv3] ->
    {'dec_Associationinformation'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
Res1 = {'RLREapdu',Term1,Term2},
Res1.


%%================================
%%  ACSErequirements
%%================================
enc_ACSErequirements(Val) ->
    enc_ACSErequirements(Val, [<<3>>]).

enc_ACSErequirements(Val, TagIn) ->
encode_named_bit_string(Val, [{authentication,0},{applicationcontextnegotiation,1}], TagIn).


dec_ACSErequirements(Tlv) ->
   dec_ACSErequirements(Tlv, [3]).

dec_ACSErequirements(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{authentication,0},{applicationcontextnegotiation,1}], TagIn).



%%================================
%%  Applicationcontextnamelist
%%================================
enc_Applicationcontextnamelist(Val) ->
    enc_Applicationcontextnamelist(Val, [<<48>>]).

enc_Applicationcontextnamelist(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Applicationcontextnamelist_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Applicationcontextnamelist_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Applicationcontextnamelist_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_object_identifier(H, [<<6>>]),
   'enc_Applicationcontextnamelist_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_Applicationcontextnamelist(Tlv) ->
   dec_Applicationcontextnamelist(Tlv, [16]).

dec_Applicationcontextnamelist(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_object_identifier(V1, [6]) || V1 <- Tlv1].




%%================================
%%  Applicationcontextname
%%================================
enc_Applicationcontextname(Val) ->
    enc_Applicationcontextname(Val, [<<6>>]).

enc_Applicationcontextname(Val, TagIn) ->
encode_object_identifier(Val, TagIn).


dec_Applicationcontextname(Tlv) ->
   dec_Applicationcontextname(Tlv, [6]).

dec_Applicationcontextname(Tlv, TagIn) ->
decode_object_identifier(Tlv, TagIn).



%%================================
%%  APtitle
%%================================
enc_APtitle(Val) ->
    enc_APtitle(Val, []).

enc_APtitle(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      aptitleform2 ->
         encode_object_identifier(element(2,Val), [<<6>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_APtitle(Tlv) ->
   dec_APtitle(Tlv, []).

dec_APtitle(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'aptitleform2'
    {6, V1} -> 
        {aptitleform2, decode_object_identifier(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  AEqualifier
%%================================
enc_AEqualifier(Val) ->
    enc_AEqualifier(Val, []).

enc_AEqualifier(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      aequalifierform2 ->
         encode_integer(element(2,Val), [<<2>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_AEqualifier(Tlv) ->
   dec_AEqualifier(Tlv, []).

dec_AEqualifier(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'aequalifierform2'
    {2, V1} -> 
        {aequalifierform2, decode_integer(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  APtitleform2
%%================================
enc_APtitleform2(Val) ->
    enc_APtitleform2(Val, [<<6>>]).

enc_APtitleform2(Val, TagIn) ->
encode_object_identifier(Val, TagIn).


dec_APtitleform2(Tlv) ->
   dec_APtitleform2(Tlv, [6]).

dec_APtitleform2(Tlv, TagIn) ->
decode_object_identifier(Tlv, TagIn).



%%================================
%%  AEqualifierform2
%%================================
enc_AEqualifierform2(Val) ->
    enc_AEqualifierform2(Val, [<<2>>]).

enc_AEqualifierform2(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_AEqualifierform2(Tlv) ->
   dec_AEqualifierform2(Tlv, [2]).

dec_AEqualifierform2(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  AEtitle
%%================================
enc_AEtitle(Val) ->
    enc_AEtitle(Val, []).

enc_AEtitle(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      aetitleform2 ->
         encode_object_identifier(element(2,Val), [<<6>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_AEtitle(Tlv) ->
   dec_AEtitle(Tlv, []).

dec_AEtitle(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'aetitleform2'
    {6, V1} -> 
        {aetitleform2, decode_object_identifier(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  AEtitleform2
%%================================
enc_AEtitleform2(Val) ->
    enc_AEtitleform2(Val, [<<6>>]).

enc_AEtitleform2(Val, TagIn) ->
encode_object_identifier(Val, TagIn).


dec_AEtitleform2(Tlv) ->
   dec_AEtitleform2(Tlv, [6]).

dec_AEtitleform2(Tlv, TagIn) ->
decode_object_identifier(Tlv, TagIn).



%%================================
%%  AEinvocationidentifier
%%================================
enc_AEinvocationidentifier(Val) ->
    enc_AEinvocationidentifier(Val, [<<2>>]).

enc_AEinvocationidentifier(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_AEinvocationidentifier(Tlv) ->
   dec_AEinvocationidentifier(Tlv, [2]).

dec_AEinvocationidentifier(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  APinvocationidentifier
%%================================
enc_APinvocationidentifier(Val) ->
    enc_APinvocationidentifier(Val, [<<2>>]).

enc_APinvocationidentifier(Val, TagIn) ->
encode_integer(Val, TagIn).


dec_APinvocationidentifier(Tlv) ->
   dec_APinvocationidentifier(Tlv, [2]).

dec_APinvocationidentifier(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  Associateresult
%%================================
enc_Associateresult(Val) ->
    enc_Associateresult(Val, [<<2>>]).

enc_Associateresult(Val, TagIn) ->
encode_integer(Val, [{accepted,0},{rejectedpermanent,1},{rejectedtransient,2}], TagIn).


dec_Associateresult(Tlv) ->
   dec_Associateresult(Tlv, [2]).

dec_Associateresult(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
number2name(Val1, [{accepted,0},{rejectedpermanent,1},{rejectedtransient,2}])
end
.



%%================================
%%  Associatesourcediagnostic
%%================================
enc_Associatesourcediagnostic(Val) ->
    enc_Associatesourcediagnostic(Val, []).

enc_Associatesourcediagnostic(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      acseserviceuser ->
         encode_integer(element(2,Val), [{null,0},{noreasongiven,1},{applicationcontextnamenotsupported,2},{callingAPtitlenotrecognized,3},{callingAPinvocationidentifiernotrecognized,4},{callingAEqualifiernotrecognized,5},{callingAEinvocationidentifiernotrecognized,6},{calledAPtitlenotrecognized,7},{calledAPinvocationidentifiernotrecognized,8},{calledAEqualifiernotrecognized,9},{calledAEinvocationidentifiernotrecognized,10},{authenticationmechanismnamenotrecognized,11},{authenticationmechanismnamerequired,12},{authenticationfailure,13},{authenticationrequired,14}], [<<2>>,<<161>>]);
      acseserviceprovider ->
         encode_integer(element(2,Val), [{null,0},{noreasongiven,1},{nocommonacseversion,2}], [<<2>>,<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_Associatesourcediagnostic(Tlv) ->
   dec_Associatesourcediagnostic(Tlv, []).

dec_Associatesourcediagnostic(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'acseserviceuser'
    {131073, V1} -> 
        {acseserviceuser, begin
Val1 = decode_integer(V1, [2]),
number2name(Val1, [{null,0},{noreasongiven,1},{applicationcontextnamenotsupported,2},{callingAPtitlenotrecognized,3},{callingAPinvocationidentifiernotrecognized,4},{callingAEqualifiernotrecognized,5},{callingAEinvocationidentifiernotrecognized,6},{calledAPtitlenotrecognized,7},{calledAPinvocationidentifiernotrecognized,8},{calledAEqualifiernotrecognized,9},{calledAEinvocationidentifiernotrecognized,10},{authenticationmechanismnamenotrecognized,11},{authenticationmechanismnamerequired,12},{authenticationfailure,13},{authenticationrequired,14}])
end
};


%% 'acseserviceprovider'
    {131074, V1} -> 
        {acseserviceprovider, begin
Val2 = decode_integer(V1, [2]),
number2name(Val2, [{null,0},{noreasongiven,1},{nocommonacseversion,2}])
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Associationinformation
%%================================
enc_Associationinformation(Val) ->
    enc_Associationinformation(Val, [<<48>>]).

enc_Associationinformation(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Associationinformation_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Associationinformation_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Associationinformation_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Myexternal'(H, [<<40>>]),
   'enc_Associationinformation_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



dec_Associationinformation(Tlv) ->
   dec_Associationinformation(Tlv, [16]).

dec_Associationinformation(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Myexternal'(V1, [8]) || V1 <- Tlv1].




%%================================
%%  Myexternal
%%================================
enc_Myexternal(Val) ->
    enc_Myexternal(Val, [<<40>>]).

enc_Myexternal(Val, TagIn) ->
{_,Cindex1,Cindex2,Cindex3} = Val,

%%-------------------------------------------------
%% attribute directreference(1) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_object_identifier(Cindex1, [<<6>>])
       end,

%%-------------------------------------------------
%% attribute indirectreference(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<2>>])
       end,

%%-------------------------------------------------
%% attribute encoding(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Myexternal_encoding'(Cindex3, []),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Myexternal_encoding
%%================================
enc_Myexternal_encoding(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      singleASN1type ->
         encode_open_type(element(2,Val), [<<160>>]);
      octetaligned ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      arbitrary ->
         encode_unnamed_bit_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_Myexternal(Tlv) ->
   dec_Myexternal(Tlv, [8]).

dec_Myexternal(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute directreference(1) with type OBJECT IDENTIFIER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{6,V1}|TempTlv2] ->
    {decode_object_identifier(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute indirectreference(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{2,V2}|TempTlv3] ->
    {decode_integer(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute encoding(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Myexternal_encoding'(V3, []),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
Res1 = {'Myexternal',Term1,Term2,Term3},
Res1.
'dec_Myexternal_encoding'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'singleASN1type'
    {131072, V1} -> 
        {singleASN1type, decode_open_type_as_binary(V1, [])};


%% 'octetaligned'
    {131073, V1} -> 
        {octetaligned, decode_octet_string(V1, [])};


%% 'arbitrary'
    {131074, V1} -> 
        {arbitrary, decode_native_bit_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Authenticationvalue
%%================================
enc_Authenticationvalue(Val) ->
    enc_Authenticationvalue(Val, []).

enc_Authenticationvalue(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      charstring ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      bitstring ->
         encode_unnamed_bit_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




dec_Authenticationvalue(Tlv) ->
   dec_Authenticationvalue(Tlv, []).

dec_Authenticationvalue(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'charstring'
    {131072, V1} -> 
        {charstring, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'bitstring'
    {131073, V1} -> 
        {bitstring, decode_native_bit_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Implementationdata
%%================================
enc_Implementationdata(Val) ->
    enc_Implementationdata(Val, [<<25>>]).

enc_Implementationdata(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


dec_Implementationdata(Tlv) ->
   dec_Implementationdata(Tlv, [25]).

dec_Implementationdata(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  Mechanismname
%%================================
enc_Mechanismname(Val) ->
    enc_Mechanismname(Val, [<<6>>]).

enc_Mechanismname(Val, TagIn) ->
encode_object_identifier(Val, TagIn).


dec_Mechanismname(Tlv) ->
   dec_Mechanismname(Tlv, [6]).

dec_Mechanismname(Tlv, TagIn) ->
decode_object_identifier(Tlv, TagIn).



%%================================
%%  Releaserequestreason
%%================================
enc_Releaserequestreason(Val) ->
    enc_Releaserequestreason(Val, [<<2>>]).

enc_Releaserequestreason(Val, TagIn) ->
encode_integer(Val, [{normal,0},{urgent,1},{userdefined,30}], TagIn).


dec_Releaserequestreason(Tlv) ->
   dec_Releaserequestreason(Tlv, [2]).

dec_Releaserequestreason(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
number2name(Val1, [{normal,0},{urgent,1},{userdefined,30}])
end
.



%%================================
%%  Releaseresponsereason
%%================================
enc_Releaseresponsereason(Val) ->
    enc_Releaseresponsereason(Val, [<<2>>]).

enc_Releaseresponsereason(Val, TagIn) ->
encode_integer(Val, [{normal,0},{notfinished,1},{userdefined,30}], TagIn).


dec_Releaseresponsereason(Tlv) ->
   dec_Releaseresponsereason(Tlv, [2]).

dec_Releaseresponsereason(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
number2name(Val1, [{normal,0},{notfinished,1},{userdefined,30}])
end
.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

dec_subidentifiers(<<>>, _Av, Al) ->
    lists:reverse(Al);
dec_subidentifiers(<<1:1,H:7,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, Av bsl 7 + H, Al);
dec_subidentifiers(<<H,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 + H|Al]).

decode_bitstring2(1,
                  Unused,
                  <<B7:1,B6:1,B5:1,B4:1,B3:1,B2:1,B1:1,B0:1,_/binary>>) ->
    lists:sublist([B7,B6,B5,B4,B3,B2,B1,B0], 8 - Unused);
decode_bitstring2(Len,
                  Unused,
                  <<B7:1,
                    B6:1,
                    B5:1,
                    B4:1,
                    B3:1,
                    B2:1,
                    B1:1,
                    B0:1,
                    Buffer/binary>>) ->
    [B7,B6,B5,B4,B3,B2,B1,B0|decode_bitstring2(Len - 1, Unused, Buffer)].

decode_bitstring_NNL(BitList, NamedNumberList) ->
    decode_bitstring_NNL(BitList, NamedNumberList, 0, []).

decode_bitstring_NNL([], _, _No, Result) ->
    lists:reverse(Result);
decode_bitstring_NNL([B|BitList],
                     [{Name,No}|NamedNumberList],
                     No,
                     Result) ->
    if
        B =:= 0 ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 Result);
        true ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 [Name|Result])
    end;
decode_bitstring_NNL([1|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList,
                         NamedNumberList,
                         No + 1,
                         [{bit,No}|Result]);
decode_bitstring_NNL([0|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList, NamedNumberList, No + 1, Result).

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_named_bit_string(Buffer, NamedNumberList, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            [];
        <<Unused,Bits/binary>> ->
            BitString = decode_bitstring2(byte_size(Bits), Unused, Bits),
            decode_bitstring_NNL(BitString, NamedNumberList)
    end.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_object_identifier(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    [AddedObjVal|ObjVals] = dec_subidentifiers(Val, 0, []),
    {Val1,Val2} =
        if
            AddedObjVal < 40 ->
                {0,AddedObjVal};
            AddedObjVal < 80 ->
                {1,AddedObjVal - 40};
            true ->
                {2,AddedObjVal - 80}
        end,
    list_to_tuple([Val1,Val2|ObjVals]).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_open_type_as_binary(Tlv, TagIn) ->
    ber_encode(match_tags(Tlv, TagIn)).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

do_encode_named_bit_string([FirstVal|RestVal], NamedBitList, TagIn) ->
    ToSetPos = get_all_bitposes([FirstVal|RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = make_and_set_list(Size, ToSetPos, 0),
    {Len,Unused,OctetList} = encode_bitstring(BitList),
    encode_tags(TagIn, [Unused|OctetList], Len + 1).

e_object_identifier({'OBJECT IDENTIFIER',V}) ->
    e_object_identifier(V);
e_object_identifier(V) when is_tuple(V) ->
    e_object_identifier(tuple_to_list(V));
e_object_identifier([E1,E2|Tail]) ->
    Head = 40 * E1 + E2,
    {H,Lh} = mk_object_val(Head),
    {R,Lr} = lists:mapfoldl(fun enc_obj_id_tail/2, 0, Tail),
    {[H|R],Lh + Lr}.

enc_obj_id_tail(H, Len) ->
    {B,L} = mk_object_val(H),
    {B,Len + L}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Val], 1);
encode_bitstring(Val) ->
    {Unused,Octet} = unused_bitlist(Val, 7, 0),
    {1,Unused,[Octet]}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest], Ack, Len) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Ack,Val], Len + 1);
encode_bitstring([], Ack, Len) ->
    {Len,0,Ack};
encode_bitstring(Rest, Ack, Len) ->
    {Unused,Val} = unused_bitlist(Rest, 7, 0),
    {Len + 1,Unused,[Ack,Val]}.

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, NamedNumberList, Tag) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedNumberList) of
        {_,NewVal} ->
            encode_tags(Tag, encode_integer(NewVal));
        _ ->
            exit({error,{asn1,{encode_integer_namednumber,Val}}})
    end;
encode_integer(Val, _NamedNumberList, Tag) ->
    encode_tags(Tag, encode_integer(Val)).

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_named_bit_string([H|_] = Bits, NamedBitList, TagIn)
    when is_atom(H) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([{bit,_}|_] = Bits, NamedBitList, TagIn) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([], _NamedBitList, TagIn) ->
    encode_unnamed_bit_string(<<>>, TagIn);
encode_named_bit_string(Bits, _NamedBitList, TagIn)
    when is_bitstring(Bits) ->
    encode_unnamed_bit_string(Bits, TagIn).

encode_object_identifier(Val, TagIn) ->
    encode_tags(TagIn, e_object_identifier(Val)).

encode_open_type(Val, T) when is_list(Val) ->
    encode_open_type(list_to_binary(Val), T);
encode_open_type(Val, Tag) ->
    encode_tags(Tag, Val, byte_size(Val)).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

get_all_bitposes([{bit,ValPos}|Rest], NamedBitList, Ack) ->
    get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
get_all_bitposes([Val|Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName,ValPos} ->
            get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
        _ ->
            exit({error,{asn1,{bitstring_namedbit,Val}}})
    end;
get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

make_and_set_list(0, [], _) ->
    [];
make_and_set_list(0, _, _) ->
    exit({error,{asn1,bitstring_sizeconstraint}});
make_and_set_list(Len, [XPos|SetPos], XPos) ->
    [1|make_and_set_list(Len - 1, SetPos, XPos + 1)];
make_and_set_list(Len, [Pos|SetPos], XPos) ->
    [0|make_and_set_list(Len - 1, [Pos|SetPos], XPos + 1)];
make_and_set_list(Len, [], XPos) ->
    [0|make_and_set_list(Len - 1, [], XPos + 1)].

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

mk_object_val(0, Ack, Len) ->
    {Ack,Len};
mk_object_val(Val, Ack, Len) ->
    mk_object_val(Val bsr 7, [Val band 127 bor 128|Ack], Len + 1).

mk_object_val(Val) when Val =< 127 ->
    {[255 band Val],1};
mk_object_val(Val) ->
    mk_object_val(Val bsr 7, [Val band 127], 1).

number2name(Int, NamedNumberList) ->
    case lists:keyfind(Int, 2, NamedNumberList) of
        {NamedVal,_} ->
            NamedVal;
        _ ->
            Int
    end.

unused_bitlist([], Trail, Ack) ->
    {Trail + 1,Ack};
unused_bitlist([Bit|Rest], Trail, Ack) ->
    unused_bitlist(Rest, Trail - 1, Bit bsl Trail bor Ack).
